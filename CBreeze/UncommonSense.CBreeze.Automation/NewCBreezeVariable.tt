<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="c:\Users\jhoek\GitHub\UncommonSense.CBreeze\CBreeze\UncommonSense.CBreeze.Core\bin\Debug\UncommonSense.CBreeze.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="UncommonSense.CBreeze.Core" #>
<#@ output extension=".cs" #>
<#
	var types = AppDomain
		.CurrentDomain
		.GetAssemblies()
		.SelectMany(a => a.GetTypes())
		.Where(t => typeof(Variable).IsAssignableFrom(t))
		.Where(t => typeof(Variable) != t);

	var skipProperties = new List<string>() {
		"ID",
		"Name",
		"Values",
	};

	var mandatoryProperties = new Dictionary<string, string[]> () {
		{"SubType", new[] { "DotNetVariable", "AutomationVariable", "RecordVariable", "PageVariable", "ReportVariable", "CodeunitVariable", "QueryVariable", "TestPageVariable", "XmlPortVariable"  }},
		{"DataLength", new[] { "BinaryVariable" } }
	};

	var positionalProperties = new Dictionary<string, int>() {
		{ "SubType", 3 }
	};
#>
using System;
using System.Management.Automation;
using UncommonSense.CBreeze.Core;

namespace UncommonSense.CBreeze.Automation 
{
<# foreach(var @type in types) { 
	var allProperties = @type.GetProperties();
	var relevantProperties = allProperties
		.Where(p => !skipProperties.Contains(p.Name))
		.Where(p => p.CanWrite)
		.Select(p => new {
			Name = p.Name,
			FullType = GetFullTypeName(p.PropertyType),
			Mandatory = mandatoryProperties.ContainsKey(p.Name) ? mandatoryProperties[p.Name].Contains(@type.Name) : false,
			Position = positionalProperties.ContainsKey(p.Name) ? positionalProperties[p.Name] : 0,
		});
	var variableName = Char.ToLowerInvariant(@type.Name[0]) + @type.Name.Substring(1);
	var hasSubType = allProperties.Any(p => p.Name == "SubType");
	var hasDataLength = allProperties.Any(p => p.Name == "DataLength");
#>
	[Cmdlet(VerbsCommon.New, "CBreeze<#=@type.Name#>>")]
	[OutputType(typeof(<#= @type.Name #>))]
	[Alias("<#= @type.Name #>")]
	public class AddBreeze<#=@type.Name#> : NewNamedItemCmdlet<<#=type.Name#>, int, PSObject>
	{
		protected override <#=@type.Name#> CreateItem()
		{
<# var arguments = new List<string>();
arguments.Add("ID");
arguments.Add("Name");
if (hasSubType) { arguments.Add("SubType"); } 
if (hasDataLength) { arguments.Add("DataLength"); }
#>
			var <#= variableName #> = new <#= @type.Name #>(<#= string.Join(", ", arguments)#>);
<# foreach(var property in relevantProperties.Where(p => p.Name != "SubType").Where(p => p.Name != "DataLength")) { #>
			<#= variableName #>.<#= property.Name #> = <#= property.Name #>;
<# } #>
			return <#= variableName #>;
		}

		protected override void AddItemToInputObject(<#=@type.Name#> item, PSObject inputObject)
		{
			inputObject.GetVariables().Add(item);
		}

<# foreach(var property in relevantProperties) { 
	arguments = new List<string>();
	if (property.Mandatory) { arguments.Add("Mandatory=true"); }
	if (property.Position != 0) { arguments.Add($"Position={property.Position}"); }
#>
		[Parameter(<#= string.Join(", ", arguments) #>)]
		public <#= property.FullType #> <#= property.Name #> { get; set; }

<# } #>
	}

<# } #>
}

<#+
	static string GetFullTypeName(Type t)
	{
		if (!t.IsGenericType)
			return t.Name;

		var stringBuilder = new StringBuilder();

		stringBuilder.Append(t.Name.Substring(0, t.Name.LastIndexOf("`")));
		stringBuilder.Append("<");
		stringBuilder.Append(string.Join(",", t.GetGenericArguments().Select(a => GetFullTypeName(a))));
		stringBuilder.Append(">");

		return stringBuilder.ToString();
	}
#>