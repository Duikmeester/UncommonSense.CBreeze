<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="C:\Users\jhoek\GitHub\UncommonSense.CBreeze\CBreeze\UncommonSense.CBreeze.Core\bin\Debug\UncommonSense.CBreeze.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="UncommonSense.CBreeze.Core" #>
<#@ output extension=".cs" #>
<#
	var types = AppDomain
		.CurrentDomain
		.GetAssemblies()
		.SelectMany(a => a.GetTypes())
		.Where(t => typeof(XmlPortNode).IsAssignableFrom(t))
		.Where(t => typeof(XmlPortNode) != t); 

	var skipProperties = new List<string>() { 
		"Item",
		"WithAValue", 
		"ChildNodes",
		"ParentNode",
		"XmlPortFieldAttribute",
		"XmlPortFieldElement",
		"XmlPortTableAttribute",
		"XmlPortTableElement",
		"XmlPortTextElement",
		"XmlPortTextAttribute"
	};
#>
using System;
using System.Linq;
using System.Management.Automation;
using UncommonSense.CBreeze.Common;
using UncommonSense.CBreeze.Core;

namespace UncommonSense.CBreeze.Automation 
{
<# 
foreach (var @type in types) { 
	var variableName = Char.ToLowerInvariant(@type.Name[0]) + @type.Name.Substring(1);
	var propertiesClass = @type.GetProperty("Properties").PropertyType;
	var relevantProperties = propertiesClass
		.GetProperties()
		.Where(p => p.PropertyType != typeof(Trigger))
		.Where(p => !skipProperties.Contains(p.Name))
		.Select(p => new {
			Name = p.Name,
			Type = p.PropertyType,
			Mandatory = false
		});
#>
	[Cmdlet(VerbsCommon.Add, "CBreeze<#= @type.Name #>")]
	[OutputType(typeof(<#= @type.Name #>))]
	[Alias("<#= @type.Name.Replace("XmlPort", "") #>")]
	public class AddCBreeze<#=@type.Name#> : NewNamedItemCmdlet<<#=@type.Name#>, Guid, PSObject>
	{
		protected override <#=@type.Name#> CreateItem()
		{
			var <#=variableName#> = new <#=@type.Name#>(Name, GetIndentation(), ID);

<# foreach(var property in relevantProperties) { #>
			<#=variableName#>.Properties.<#=property.Name#> = <#=property.Name#>;
<# } #>

			return <#=variableName#>;
		}

		protected override void AddItemToInputObject(<#= @type.Name #> item, PSObject inputObject)
		{
			throw new NotImplementedException(); // FIXME
		}

		protected int? GetIndentation()
		{
			switch(ParameterSetName)
			{
				case ParameterSetNames.AddWithID:
				case ParameterSetNames.AddWithoutID:
					return null; // FIXME
					
				case ParameterSetNames.NewWithID:
				case ParameterSetNames.NewWithoutID:
					return (int?)GetVariableValue("Indentation", null);

				default: 
					return null;
			}
		}

<# foreach(var property in relevantProperties) { #>
		[Parameter(<# if (property.Mandatory) { #>Mandatory = true<# } #>)]
		public <#= GetFullTypeName(property.Type) #> <#= property.Name #> { get; set; }

<# } #>
	}

<# } #>
}
<#+
	static string GetFullTypeName(Type t)
	{
		if (!t.IsGenericType)
			return t.Name;

		var stringBuilder = new StringBuilder();

		stringBuilder.Append(t.Name.Substring(0, t.Name.LastIndexOf("`")));
		stringBuilder.Append("<");
		stringBuilder.Append(string.Join(",", t.GetGenericArguments().Select(a => GetFullTypeName(a))));
		stringBuilder.Append(">");

		return stringBuilder.ToString();
	}
#>