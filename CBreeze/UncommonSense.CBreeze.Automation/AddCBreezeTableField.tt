<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Management.Automation" #>
<#@ assembly name="C:\Users\jhoek\GitHub\UncommonSense.CBreeze\CBreeze\UncommonSense.CBreeze.Core\bin\Debug\UncommonSense.CBreeze.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Management.Automation" #>
<#@ import namespace="UncommonSense.CBreeze.Core" #>
<#@ output extension=".cs" #>
<#
	var types = AppDomain
		.CurrentDomain
		.GetAssemblies()
		.SelectMany(a => a.GetTypes())
		.Where(t => typeof(TableField).IsAssignableFrom(t))
		.Where(t => typeof(TableField) != t);

	var defaultDataLengths = new Dictionary<Type, int>() 
	{
		{ typeof(BinaryTableField), 4 },
		{ typeof(CodeTableField), 10 },
		{ typeof(TextTableField), 30 }
	};
#>
// FIXME AutoDataCaptionFields?
// FIXME CalcFormula.Set
// FIXME Field numbering if table is in "own" range
// FIXME OptionString mandatory

using System;
using UncommonSense.CBreeze.Core;
using System.Management.Automation;

namespace UncommonSense.CBreeze.Automation
{
<# foreach(var @type in types) { 
	var variableName = Char.ToLowerInvariant(@type.Name[0]) + @type.Name.Substring(1); 
	var hasDataLength = @type.GetProperty("DataLength") != null; 
	var propertiesClass = @type.GetProperty("Properties").PropertyType;
	var skipProperties = new List<string>() { "Field", "ParentNode", "Description", "CaptionML", "OnLookup", "OnValidate", "WithAValue", "ChildNodes", "Item", "AccessByPermission", "TableRelation", "CalcFormula" }; 

	var relevantProperties = propertiesClass
		.GetProperties()
		.Where(p => !skipProperties.Contains(p.Name))
		.Select(p=> new { 
			Name = p.Name, 
			Type = p.PropertyType,
			Assignment = $"{variableName}.Properties.{p.Name} = {p.Name};" }); 

	if (relevantProperties.Any(p => p.Name == "DecimalPlaces"))
	{
		var newProperties = new[] {
			new{ 
				Name = "DecimalPlacesAtLeast", 
				Type = typeof(int?),
				Assignment = $"{variableName}.Properties.DecimalPlaces.AtLeast = DecimalPlacesAtLeast;"
			},
			new {
				Name = "DecimalPlacesAtMost", 
				Type = typeof(int?),
				Assignment = $"{variableName}.Properties.DecimalPlaces.AtMost = DecimalPlacesAtMost;"
			}
		};

		relevantProperties = relevantProperties
			.Where(p => p.Name != "DecimalPlaces")
			.Concat(newProperties);
	}

	relevantProperties = relevantProperties.OrderBy(p => p.Name);

	if (relevantProperties.Any(p => p.Name == "OptionCaptionML"))
	{
		var crLf = Environment.NewLine;

		var newProperties = new [] {
			new {
				Name = "AutoOptionCaption",
				Type = typeof(SwitchParameter),
				Assignment = $"{crLf}			if (AutoOptionCaption) {crLf}				{variableName}.AutoOptionCaption();"
			}
		};

		relevantProperties = relevantProperties
			.Where(p => p.Name != "OptionCaptionML")
			.Concat(newProperties);
	}

#>
	[Cmdlet(VerbsCommon.Add, "CBreeze<#=@type.Name#>")]
	[OutputType(typeof(<#=type.Name#>))]
	[Alias("<#=@type.Name.Replace("Table", "")#>")]
	public class AddCBreeze<#=@type.Name#> : AddCBreezeTableField2<<#=@type.Name#>>
	{

<# if (hasDataLength) { #>
		[Parameter()]
		[ValidateRange(1, 250)]
		public int? DataLength { get; set; } 	
<# } #>

		protected override <#=@type.Name#> CreateItem()
		{
			var <#=variableName#> = new <#=@type.Name#>(ID, Name<#if (hasDataLength) {#>, DataLength ?? <#=defaultDataLengths[@type]#><# } #>);
			<#=variableName#>.Enabled = Enabled;
            <#=variableName#>.Properties.Description = Description;

<# foreach(var property in relevantProperties) { #>
			<#=property.Assignment#>
<# } #>

			if (AutoCaption)
                <#=variableName#>.AutoCaption();

			return <#=variableName#>;
		}

<# foreach(var property in relevantProperties) { #>
	[Parameter()]
	public <#=GetFullTypeName(property.Type)#> <#=property.Name#> { get;set; }

<# } #>

	}

<# } #>
}
<#+
	static string GetFullTypeName(Type t)
	{
		if (!t.IsGenericType)
			return t.Name;

		var stringBuilder = new StringBuilder();

		stringBuilder.Append(t.Name.Substring(0, t.Name.LastIndexOf("`")));
		stringBuilder.Append("<");
		stringBuilder.Append(string.Join(",", t.GetGenericArguments().Select(a => GetFullTypeName(a))));
		stringBuilder.Append(">");

		return stringBuilder.ToString();
	}
#>
