<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="C:\Users\jhoek\GitHub\UncommonSense.CBreeze\CBreeze\UncommonSense.CBreeze.Core\bin\Debug\UncommonSense.CBreeze.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="UncommonSense.CBreeze.Core" #>
<#@ output extension=".cs" #>
<#
	var types = AppDomain
		.CurrentDomain
		.GetAssemblies()
		.SelectMany(a => a.GetTypes())
		.Where(t => typeof(TableField).IsAssignableFrom(t))
		.Where(t => typeof(TableField) != t);

	var defaultDataLengths = new Dictionary<Type, int>() 
	{
		{ typeof(BinaryTableField), 4 },
		{ typeof(CodeTableField), 10 },
		{ typeof(TextTableField), 30 }
	};
#>
using UncommonSense.CBreeze.Core;
using System.Management.Automation;

namespace UncommonSense.CBreeze.Automation
{
<# foreach(var @type in types) { 
	var variableName = Char.ToLowerInvariant(@type.Name[0]) + @type.Name.Substring(1); 
	var hasDataLength = @type.GetProperty("DataLength") != null; 
	var propertiesClass = @type.GetProperty("Properties").PropertyType; #>
	[Cmdlet(VerbsCommon.Add, "CBreeze<#=@type.Name#>")]
	[Alias("<#=@type.Name.Replace("Table", "")#>")]
	public class AddCBreeze<#=@type.Name#> : AddCBreezeTableField2<<#=@type.Name#>>
	{

<# if (hasDataLength) { #>
		[Parameter()]
		[ValidateRange(1, 250)]
		public int? DataLength { get; set; } 	
<# } #>

		protected override <#=@type.Name#> CreateItem()
		{
			var <#=variableName#> = new <#=@type.Name#>(ID, Name<#if (hasDataLength) {#>, DataLength ?? <#=defaultDataLengths[@type]#><# } #>);
			<#=variableName#>.Enabled = Enabled;
            <#=variableName#>.Properties.Description = Description;

			if (AutoCaption)
                <#=variableName#>.AutoCaption();

			return <#=variableName#>;
		}

		// <#= string.Join(", ", propertiesClass.GetProperties().Select(p=>p.Name)) #>

	}

<# } #>
}