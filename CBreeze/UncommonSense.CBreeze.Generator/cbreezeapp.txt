OBJECT Table 50000 Object Model
{
  OBJECT-PROPERTIES
  {
    Date=04-02-14;
    Time=16:42:13;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Object Model Namespace;
    OnDelete=BEGIN
               DeleteImportedTypes;
               DeleteEnumerations;
               DeleteItems;
               DeleteCollections;
               DeletePropertyTypes;
               DeletePropertyCollections;
             END;

    LookupFormID=Form50000;
    DrillDownFormID=Form50000;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;NotBlank=Yes }
    { 10  ;   ;Object Model Namespace;Text80       }
    { 20  ;   ;Object Model Source File Name;Text250 }
    { 21  ;   ;Obj. Model Partials File Name;Text250 }
    { 25  ;   ;Assembly Info File Name;Text250     }
    { 30  ;   ;Assembly File Name  ;Text250        }
    { 40  ;   ;Assembly Title      ;Text80         }
    { 41  ;   ;Assembly Description;Text80         }
    { 42  ;   ;Assembly Company    ;Text80         }
    { 43  ;   ;Assembly Product Name;Text80        }
    { 44  ;   ;Assembly Copyright  ;Text80         }
    { 45  ;   ;Major Version No.   ;Integer        }
    { 46  ;   ;Minor Version No.   ;Integer        }
    { 47  ;   ;Build No.           ;Integer       ;MinValue=10000;
                                                   MaxValue=99999 }
    { 48  ;   ;Revision No.        ;Integer        }
    { 50  ;   ;Description File Name;Text250       }
    { 100 ;   ;No. of Imported Types;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Imported Type" WHERE (Object Model Code=FIELD(Code)));
                                                   Editable=No }
    { 110 ;   ;No. of Enumerations ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Enumeration WHERE (Object Model Code=FIELD(Code)));
                                                   Editable=No }
    { 120 ;   ;No. of Items        ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Item WHERE (Object Model Code=FIELD(Code)));
                                                   Editable=No }
    { 130 ;   ;No. of Collections  ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Collection WHERE (Object Model Code=FIELD(Code)));
                                                   Editable=No }
    { 140 ;   ;No. of Property Types;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Property Type" WHERE (Object Model Code=FIELD(Code)));
                                                   Editable=No }
    { 150 ;   ;No. of Property Collections;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Property Collection" WHERE (Object Model Code=FIELD(Code)));
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE DeleteImportedTypes@1000000000();
    VAR
      ImportedType@1000000000 : Record 50001;
    BEGIN
      ImportedType.SETRANGE("Object Model Code", Code);
      ImportedType.DELETEALL(TRUE);
    END;

    PROCEDURE DeleteEnumerations@1000000001();
    VAR
      Enumeration@1000000000 : Record 50002;
    BEGIN
      Enumeration.SETRANGE("Object Model Code", Code);
      Enumeration.DELETEALL(TRUE);
    END;

    PROCEDURE DeleteItems@1000000002();
    VAR
      Item@1000000000 : Record 50005;
    BEGIN
      Item.SETRANGE("Object Model Code", Code);
      Item.DELETEALL(TRUE);
    END;

    PROCEDURE DeleteCollections@1000000003();
    VAR
      Collection@1000000000 : Record 50007;
    BEGIN
      Collection.SETRANGE("Object Model Code", Code);
      Collection.DELETEALL(TRUE);
    END;

    PROCEDURE DeletePropertyTypes@1100476000();
    VAR
      PropertyType@1100476000 : Record 50014;
    BEGIN
      PropertyType.SETRANGE("Object Model Code", Code);
      PropertyType.DELETEALL(TRUE);
    END;

    PROCEDURE DeletePropertyCollections@1100476001();
    VAR
      PropertyCollection@1100476000 : Record 50015;
    BEGIN
      PropertyCollection.SETRANGE("Object Model Code", Code);
      PropertyCollection.DELETEALL(TRUE);
    END;

    BEGIN
    END.
  }
}

OBJECT Table 50001 Imported Type
{
  OBJECT-PROPERTIES
  {
    Date=18-06-13;
    Time=13:18:58;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    LookupFormID=Form50001;
    DrillDownFormID=Form50001;
  }
  FIELDS
  {
    { 1   ;   ;Object Model Code   ;Code10        ;TableRelation="Object Model";
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text80        ;NotBlank=Yes }
    { 20  ;   ;Namespace           ;Text80         }
  }
  KEYS
  {
    {    ;Object Model Code,Name                  ;Clustered=Yes }
    {    ;Namespace                                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 50002 Enumeration
{
  OBJECT-PROPERTIES
  {
    Date=07-07-15;
    Time=16:16:00;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    DataCaptionFields=Name;
    OnDelete=BEGIN
               DeleteEnumerationValues;
             END;

    LookupFormID=Form50002;
    DrillDownFormID=Form50002;
  }
  FIELDS
  {
    { 1   ;   ;Object Model Code   ;Code10        ;TableRelation="Object Model";
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text80        ;NotBlank=Yes }
    { 10  ;   ;URL                 ;Text80         }
    { 90  ;   ;Generated           ;Boolean       ;Editable=No }
    { 100 ;   ;No. of Times Used   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Attribute WHERE (Object Model Code=FIELD(Object Model Code),
                                                                                      Type=CONST(Enumeration),
                                                                                      Type Name=FIELD(Name)));
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Object Model Code,Name                  ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE DeleteEnumerationValues@1000000000();
    VAR
      EnumerationValue@1000000000 : Record 50003;
    BEGIN
      EnumerationValue.SETRANGE("Object Model Code", "Object Model Code");
      EnumerationValue.SETRANGE("Enumeration Name", Name);
      EnumerationValue.DELETEALL(TRUE);
    END;

    PROCEDURE Values@1000000001() Result : Text[1024];
    VAR
      EnumerationValue@1000000000 : Record 50003;
      Separator@1000000001 : Text[1];
    BEGIN
      // FIXME: MAXSTRLEN

      EnumerationValue.SETRANGE("Object Model Code", "Object Model Code");
      EnumerationValue.SETRANGE("Enumeration Name", Name);

      IF EnumerationValue.FINDSET THEN
        REPEAT
          Result := Result + Separator + EnumerationValue.Value;
          Separator := ',';
        UNTIL EnumerationValue.NEXT = 0;
    END;

    PROCEDURE ValuesAssistEdit@1000000002();
    VAR
      EnumerationValue@1000000000 : Record 50003;
    BEGIN
      EnumerationValue.SETRANGE("Object Model Code", "Object Model Code");
      EnumerationValue.SETRANGE("Enumeration Name", Name);

      FORM.RUN(0, EnumerationValue);
    END;

    PROCEDURE Write@1000000005(VAR OutputFile@1000000000 : File);
    BEGIN
      OutputFile.WRITE(STRSUBSTNO('    public enum %1', Name));
      OutputFile.WRITE('    {');

      WriteValues(OutputFile);

      OutputFile.WRITE('    }');
      OutputFile.WRITE('');
    END;

    PROCEDURE WriteValues@1000000004(VAR OutputFile@1000000001 : File);
    VAR
      EnumerationValue@1000000002 : Record 50003;
    BEGIN
      EnumerationValue.SETRANGE("Object Model Code", "Object Model Code");
      EnumerationValue.SETRANGE("Enumeration Name", Name);

      IF EnumerationValue.FINDSET THEN
        REPEAT
          EnumerationValue.Write(OutputFile);
        UNTIL EnumerationValue.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 50003 Enumeration Value
{
  OBJECT-PROPERTIES
  {
    Date=04-04-13;
    Time=10:59:14;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    LookupFormID=Form50003;
    DrillDownFormID=Form50003;
  }
  FIELDS
  {
    { 1   ;   ;Object Model Code   ;Code10        ;TableRelation="Object Model";
                                                   NotBlank=Yes }
    { 2   ;   ;Enumeration Name    ;Text80        ;TableRelation=Enumeration.Name WHERE (Object Model Code=FIELD(Object Model Code));
                                                   NotBlank=Yes }
    { 3   ;   ;No.                 ;Integer        }
    { 10  ;   ;Value               ;Text80         }
  }
  KEYS
  {
    {    ;Object Model Code,Enumeration Name,No.  ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE Write@1000000003(VAR OutputFile@1000000001 : File);
    BEGIN
      OutputFile.WRITE(STRSUBSTNO('        %1,', Value));
    END;

    BEGIN
    END.
  }
}

OBJECT Table 50005 Item
{
  OBJECT-PROPERTIES
  {
    Date=07-07-15;
    Time=16:36:04;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    DataCaptionFields=Name;
    OnDelete=BEGIN
               DeleteAttributes;
             END;

    LookupFormID=Form50004;
    DrillDownFormID=Form50004;
  }
  FIELDS
  {
    { 1   ;   ;Object Model Code   ;Code10        ;TableRelation="Object Model";
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                UpdateNamePath;
                                                              END;

                                                   NotBlank=Yes }
    { 10  ;   ;Base Type           ;Text50        ;TableRelation=Item.Name WHERE (Object Model Code=FIELD(Object Model Code));
                                                   OnValidate=BEGIN
                                                                UpdateNamePath;
                                                              END;
                                                               }
    { 90  ;   ;Differentiator Enum Name;Text50    ;Editable=No }
    { 100 ;   ;Creatable           ;Boolean        }
    { 110 ;   ;Abstract            ;Boolean        }
    { 200 ;   ;No. of Attributes   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Attribute WHERE (Object Model Code=FIELD(Object Model Code),
                                                                                      Container Type=CONST(Item),
                                                                                      Container Name=FIELD(Name),
                                                                                      Name=FIELD(Attribute Name Filter)));
                                                   Editable=No }
    { 210 ;   ;No. of Derived Types;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Item WHERE (Object Model Code=FIELD(Object Model Code),
                                                                                 Base Type=FIELD(Name)));
                                                   Editable=No }
    { 220 ;   ;No. of Times Used (Attributes);Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count(Attribute WHERE (Object Model Code=FIELD(Object Model Code),
                                                                                      Type=CONST(Item),
                                                                                      Type Name=FIELD(Name)));
                                                   Editable=No }
    { 221 ;   ;No. of Times Used (Collectns.);Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count(Collection WHERE (Object Model Code=FIELD(Object Model Code),
                                                                                       Item Type=FIELD(Name)));
                                                   Editable=No }
    { 300 ;   ;Name Path           ;Text101       ;Editable=No }
    { 400 ;   ;Attribute Name Filter;Text80       ;FieldClass=FlowFilter }
  }
  KEYS
  {
    {    ;Object Model Code,Name                  ;Clustered=Yes }
    {    ;Object Model Code,Base Type              }
    {    ;Object Model Code,Name Path              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE DeleteAttributes@1000000000();
    VAR
      Attribute@1000000000 : Record 50009;
    BEGIN
      Attribute.SETRANGE("Object Model Code", "Object Model Code");
      Attribute.SETRANGE("Container Name", Name);
      Attribute.DELETEALL(TRUE);
    END;

    PROCEDURE UpdateNamePath@1000000003();
    BEGIN
      CASE TRUE OF
        "Base Type" = '': "Name Path" := Name;
      ELSE
        "Name Path" := STRSUBSTNO('%1 %2', "Base Type", Name);
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 50007 Collection
{
  OBJECT-PROPERTIES
  {
    Date=17-01-14;
    Time=09:25:09;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    LookupFormID=Form50005;
    DrillDownFormID=Form50005;
  }
  FIELDS
  {
    { 1   ;   ;Object Model Code   ;Code10        ;TableRelation="Object Model";
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text80        ;NotBlank=Yes }
    { 10  ;   ;Item Type           ;Text80        ;TableRelation=Item.Name WHERE (Object Model Code=FIELD(Object Model Code)) }
    { 20  ;   ;Generate Insert Method;Boolean      }
    { 25  ;   ;Generate Remove Method;Boolean      }
    { 30  ;   ;Collection Style    ;Option        ;OptionString=List,,,,,Dictionary }
    { 35  ;   ;Gen. FindIndex/FindLastIndex;Boolean }
    { 40  ;   ;Generate AddRange Method;Boolean    }
    { 220 ;   ;No. of Times Used (Attributes);Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count(Attribute WHERE (Object Model Code=FIELD(Object Model Code),
                                                                                      Type=CONST(Collection),
                                                                                      Type Name=FIELD(Name)));
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Object Model Code,Name                  ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 50009 Attribute
{
  OBJECT-PROPERTIES
  {
    Date=28-06-14;
    Time=10:28:07;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    LookupFormID=Form50006;
    DrillDownFormID=Form50006;
  }
  FIELDS
  {
    { 1   ;   ;Object Model Code   ;Code10        ;TableRelation="Object Model";
                                                   NotBlank=Yes }
    { 4   ;   ;Container Type      ;Option        ;OptionString=Item,,,,,,Property }
    { 5   ;   ;Container Name      ;Text80        ;TableRelation=IF (Container Type=CONST(Item)) Item.Name WHERE (Object Model Code=FIELD(Object Model Code))
                                                                 ELSE IF (Container Type=CONST(Property)) Table50010.Field2 WHERE (Field1=FIELD(Object Model Code));
                                                   NotBlank=Yes }
    { 9   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                IF Name <> '' THEN
                                                                  Name[1] := UPPERCASE(FORMAT(Name[1]))[1];

                                                                "Field Name" := '';

                                                                IF Name <> '' THEN
                                                                  "Field Name" := LOWERCASE(COPYSTR(Name, 1, 1)) + COPYSTR(Name, 2);
                                                              END;

                                                   NotBlank=Yes }
    { 10  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                CASE Type OF
                                                                  Type::"Imported Type": Initialization := Initialization::None;
                                                                  Type::Enumeration: Initialization := Initialization::None;
                                                                  Type::Item: Initialization := Initialization::Instantiate;
                                                                  Type::Collection: Initialization := Initialization::Instantiate;
                                                                END;

                                                                UpdateHasSetter;
                                                                UpdateNullable;
                                                              END;

                                                   OptionString=[ ,,,,,Imported Type,,,,,Enumeration,,,,,Item,,,,,Collection,,,,,Property Collection] }
    { 20  ;   ;Type Name           ;Text80        ;TableRelation=IF (Type=CONST(Imported Type)) "Imported Type".Name WHERE (Object Model Code=FIELD(Object Model Code))
                                                                 ELSE IF (Type=CONST(Collection)) Collection.Name WHERE (Object Model Code=FIELD(Object Model Code))
                                                                 ELSE IF (Type=CONST(Item)) Item.Name WHERE (Object Model Code=FIELD(Object Model Code))
                                                                 ELSE IF (Type=CONST(Enumeration)) Enumeration.Name WHERE (Object Model Code=FIELD(Object Model Code))
                                                                 ELSE IF (Type=CONST(Property Collection)) "Property Collection".Name WHERE (Object Model Code=FIELD(Object Model Code)) }
    { 30  ;   ;Sort Order          ;Integer       ;InitValue=1000 }
    { 100 ;   ;Field Name          ;Text80         }
    { 110 ;   ;Initialization      ;Option        ;OnValidate=BEGIN
                                                                UpdateHasSetter;
                                                              END;

                                                   OptionString=None,,,,,Constructor Parameter,,,,,Instantiate,,,,,Field Declaration }
    { 120 ;   ;Field Declaration Init Value;Text80 }
    { 125 ;   ;Ctor Parameter Default Value;Text80 }
    { 130 ;   ;Has Setter          ;Boolean        }
    { 140 ;   ;Abstract            ;Boolean        }
    { 150 ;   ;Override            ;Boolean        }
    { 160 ;   ;Nullable            ;Boolean        }
    { 200 ;   ;URL                 ;Text250        }
    { 210 ;   ;Format/Args Ctor Params;Boolean     }
    { 220 ;   ;Dictionary Key      ;Boolean        }
  }
  KEYS
  {
    {    ;Object Model Code,Container Type,Container Name,Name;
                                                   Clustered=Yes }
    {    ;Object Model Code,Container Type,Container Name,Sort Order }
    {    ;Object Model Code,Type,Type Name         }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE UpdateHasSetter@1000000001();
    BEGIN
      "Has Setter" :=
        (Type IN [Type::"Imported Type", Type::Enumeration]) AND
        (Initialization <> Initialization::"Constructor Parameter");
    END;

    PROCEDURE UpdateNullable@1000000003();
    BEGIN
      Nullable := (Type = Type::Enumeration);
    END;

    PROCEDURE CreatePropertyTypeFromAttrib@1000000002();
    VAR
      PropertyType@1000000000 : Record 50014;
    BEGIN
      PropertyType.VALIDATE("Object Model Code", "Object Model Code");
      PropertyType.VALIDATE(Name, STRSUBSTNO('%1Property', "Type Name"));
      PropertyType.VALIDATE("Encapsulated Type", Type);
      PropertyType.VALIDATE("Encapsulated Name", "Type Name");
      PropertyType.INSERT(TRUE);
    END;

    BEGIN
    END.
  }
}

OBJECT Table 50014 Property Type
{
  OBJECT-PROPERTIES
  {
    Date=26-07-13;
    Time=22:13:51;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    LookupFormID=Form50014;
    DrillDownFormID=Form50014;
  }
  FIELDS
  {
    { 1   ;   ;Object Model Code   ;Code10        ;TableRelation="Object Model";
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text50        ;NotBlank=Yes }
    { 10  ;   ;Encapsulated Type   ;Option        ;OnValidate=BEGIN
                                                                CASE "Encapsulated Type" OF
                                                                  "Encapsulated Type"::Collection:
                                                                    "HasValue Expression" := 'Value.Any()';
                                                                  "Encapsulated Type"::Enumeration:
                                                                    "HasValue Expression" := 'Value.HasValue';
                                                                ELSE
                                                                  "HasValue Expression" := '';
                                                                END;

                                                                CASE "Encapsulated Type" OF
                                                                  "Encapsulated Type"::"Imported Type":
                                                                    "Has Setter" := "Has Setter"::Yes;
                                                                  "Encapsulated Type"::Enumeration:
                                                                    "Has Setter" := "Has Setter"::Yes;
                                                                ELSE
                                                                  "Has Setter" := "Has Setter"::" ";
                                                                END;
                                                              END;

                                                   OptionString=[ ,,,,,Imported Type,,,,,Enumeration,,,,,Item,,,,,Collection] }
    { 20  ;   ;Encapsulated Name   ;Text50        ;TableRelation=IF (Encapsulated Type=CONST(Imported Type)) "Imported Type".Name WHERE (Object Model Code=FIELD(Object Model Code))
                                                                 ELSE IF (Encapsulated Type=CONST(Enumeration)) Enumeration.Name WHERE (Object Model Code=FIELD(Object Model Code))
                                                                 ELSE IF (Encapsulated Type=CONST(Item)) Item.Name WHERE (Object Model Code=FIELD(Object Model Code))
                                                                 ELSE IF (Encapsulated Type=CONST(Collection)) Collection.Name WHERE (Object Model Code=FIELD(Object Model Code)) }
    { 30  ;   ;Has Setter          ;Option        ;OptionString=[ ,No,Yes] }
    { 100 ;   ;HasValue Expression ;Text80         }
    { 110 ;   ;Initial Value Expression;Text80     }
    { 200 ;   ;No. of Times Used   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Property Collection Member" WHERE (Object Model Code=FIELD(Object Model Code),
                                                                                                         Property Type=FIELD(Name)));
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Object Model Code,Name                  ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 50015 Property Collection
{
  OBJECT-PROPERTIES
  {
    Date=22-08-13;
    Time=20:08:45;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnDelete=VAR
               PropertyCollectionMember@1100476000 : Record 50016;
             BEGIN
               PropertyCollectionMember.SETRANGE("Object Model Code", "Object Model Code");
               PropertyCollectionMember.SETRANGE("Property Collection Name", Name);
               PropertyCollectionMember.DELETEALL(TRUE);
             END;

    LookupFormID=Form50015;
    DrillDownFormID=Form50015;
  }
  FIELDS
  {
    { 1   ;   ;Object Model Code   ;Code10        ;TableRelation="Object Model" }
    { 2   ;   ;Name                ;Text50         }
    { 50  ;   ;Export              ;Boolean        }
    { 100 ;   ;No. of Members      ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Property Collection Member" WHERE (Object Model Code=FIELD(Object Model Code),
                                                                                                         Property Collection Name=FIELD(Name)));
                                                   Editable=No }
    { 110 ;   ;No. of Sorted Members;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Property Collection Member" WHERE (Object Model Code=FIELD(Object Model Code),
                                                                                                         Property Collection Name=FIELD(Name),
                                                                                                         Sort Order=FILTER(<>0)));
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Object Model Code,Name                  ;Clustered=Yes }
    {    ;Export                                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 50016 Property Collection Member
{
  OBJECT-PROPERTIES
  {
    Date=23-05-13;
    Time=11:16:49;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    LookupFormID=Form50016;
    DrillDownFormID=Form50016;
  }
  FIELDS
  {
    { 1   ;   ;Object Model Code   ;Code10        ;TableRelation="Object Model";
                                                   NotBlank=Yes }
    { 2   ;   ;Property Collection Name;Text50    ;TableRelation="Property Collection".Name WHERE (Object Model Code=FIELD(Object Model Code));
                                                   NotBlank=Yes }
    { 3   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                IF ("Field Name" = '') OR ("Field Name" = BuildFieldName(xRec.Name)) THEN
                                                                  "Field Name" := BuildFieldName(Name);
                                                              END;

                                                   NotBlank=Yes }
    { 10  ;   ;Property Type       ;Text50        ;TableRelation="Property Type".Name WHERE (Object Model Code=FIELD(Object Model Code)) }
    { 20  ;   ;Field Name          ;Text50         }
    { 30  ;   ;Sort Order          ;Integer        }
    { 110 ;   ;Encapsulated Type   ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Property Type"."Encapsulated Type" WHERE (Object Model Code=FIELD(Object Model Code),
                                                                                                                 Name=FIELD(Property Type)));
                                                   OptionString=[ ,,,,,Imported Type,,,,,Enumeration,,,,,Item,,,,,Collection];
                                                   Editable=No }
    { 120 ;   ;Encapsulated Name   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Property Type"."Encapsulated Name" WHERE (Object Model Code=FIELD(Object Model Code),
                                                                                                                 Name=FIELD(Property Type)));
                                                   TableRelation=IF (Encapsulated Type=CONST(Imported Type)) "Imported Type".Name WHERE (Object Model Code=FIELD(Object Model Code))
                                                                 ELSE IF (Encapsulated Type=CONST(Enumeration)) Enumeration.Name WHERE (Object Model Code=FIELD(Object Model Code))
                                                                 ELSE IF (Encapsulated Type=CONST(Item)) Item.Name WHERE (Object Model Code=FIELD(Object Model Code))
                                                                 ELSE IF (Encapsulated Type=CONST(Collection)) Collection.Name WHERE (Object Model Code=FIELD(Object Model Code));
                                                   Editable=No }
    { 130 ;   ;Has Setter          ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Property Type"."Has Setter" WHERE (Object Model Code=FIELD(Object Model Code),
                                                                                                          Name=FIELD(Property Type)));
                                                   OptionString=[ ,No,Yes];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Object Model Code,Property Collection Name,Name;
                                                   Clustered=Yes }
    {    ;Object Model Code,Property Collection Name,Sort Order }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE BuildFieldName@1000000000(PropertyName@1000000000 : Text[50]) : Text[50];
    BEGIN
      IF PropertyName = '' THEN
        EXIT;

      EXIT(LOWERCASE(COPYSTR(PropertyName, 1, 1)) + COPYSTR(PropertyName, 2));
    END;

    BEGIN
    END.
  }
}

OBJECT Form 50000 Object Models
{
  OBJECT-PROPERTIES
  {
    Date=07-07-15;
    Time=13:57:27;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    Width=16720;
    Height=6710;
    TableBoxID=1000000000;
    SourceTable=Table50000;
  }
  CONTROLS
  {
    { 1000000000;TableBox;220 ;220  ;16280;5500 ;HorzGlue=Both;
                                                 VertGlue=Both }
    { 1000000001;TextBox;0    ;0    ;1700 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr=Code }
    { 1000000002;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000001;
                                                 InColumnHeading=Yes }
    { 1000000003;TextBox;0    ;0    ;4400 ;0    ;HorzGlue=Both;
                                                 ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Object Model Namespace" }
    { 1000000004;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000003;
                                                 InColumnHeading=Yes }
    { 1000000008;TextBox;6223 ;2310 ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="No. of Imported Types" }
    { 1000000009;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000008;
                                                 InColumnHeading=Yes }
    { 1000000010;TextBox;7923 ;2310 ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="No. of Enumerations" }
    { 1000000011;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000010;
                                                 InColumnHeading=Yes }
    { 1000000012;TextBox;10350;2310 ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="No. of Items" }
    { 1000000013;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000012;
                                                 InColumnHeading=Yes }
    { 1000000014;TextBox;11176;1210 ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="No. of Collections" }
    { 1000000015;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000014;
                                                 InColumnHeading=Yes }
    { 1000000020;TextBox;12213;880  ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="No. of Property Types" }
    { 1000000021;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000020;
                                                 InColumnHeading=Yes }
    { 1000000024;TextBox;13913;880  ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="No. of Property Collections" }
    { 1000000025;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000024;
                                                 InColumnHeading=Yes }
    { 1000000005;CommandButton;4620;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Default=Yes;
                                                 PushAction=LookupOK;
                                                 InvalidActionAppearance=Hide }
    { 1000000006;CommandButton;7040;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Cancel=Yes;
                                                 PushAction=LookupCancel;
                                                 InvalidActionAppearance=Hide }
    { 1000000007;CommandButton;14300;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
    { 1000000016;MenuButton;9460;5940;2200;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 CaptionML=ENU=&Object Model;
                                                 Menu=MENUITEMS
                                                 {
                                                   { ID=1000000017;
                                                     PushAction=RunObject;
                                                     CaptionML=ENU=Assembly Info;
                                                     RunObject=Form 50020;
                                                     RunFormLinkType=OnUpdate;
                                                     RunFormView=SORTING(Code);
                                                     RunFormLink=Code=FIELD(Code) }
                                                 }
                                                  }
    { 1000000018;MenuButton;11880;5940;2200;550 ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 CaptionML=ENU=F&unctions;
                                                 Menu=MENUITEMS
                                                 {
                                                   { ID=1000000019;
                                                     ShortCutKey=Shift+Ctrl+B;
                                                     CaptionML=ENU=Generate;
                                                     OnPush=BEGIN
                                                              CODEUNIT.RUN(CODEUNIT::"Generate Object Model");
                                                            END;
                                                             }
                                                   { ID=1000000022;
                                                     MenuItemType=Separator }
                                                   { ID=1000000023;
                                                     CaptionML=ENU=View Source File;
                                                     OnPush=BEGIN
                                                              TESTFIELD("Object Model Source File Name");
                                                              HYPERLINK("Object Model Source File Name");
                                                            END;
                                                             }
                                                 }
                                                  }
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Form 50001 Imported Types
{
  OBJECT-PROPERTIES
  {
    Date=06-02-13;
    Time=15:40:24;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    Width=10450;
    Height=6710;
    TableBoxID=1000000000;
    SourceTable=Table50001;
    DataCaptionFields=Object Model Code;
  }
  CONTROLS
  {
    { 1000000000;TableBox;220 ;220  ;10010;5500 ;HorzGlue=Both;
                                                 VertGlue=Both }
    { 1000000001;TextBox;0    ;0    ;4400 ;0    ;HorzGlue=Both;
                                                 ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr=Name }
    { 1000000002;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000001;
                                                 InColumnHeading=Yes }
    { 1000000003;TextBox;0    ;0    ;4400 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr=Namespace }
    { 1000000004;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000003;
                                                 InColumnHeading=Yes }
    { 1000000005;CommandButton;3190;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Default=Yes;
                                                 PushAction=LookupOK;
                                                 InvalidActionAppearance=Hide }
    { 1000000006;CommandButton;5610;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Cancel=Yes;
                                                 PushAction=LookupCancel;
                                                 InvalidActionAppearance=Hide }
    { 1000000007;CommandButton;8030;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Form 50002 Enumerations
{
  OBJECT-PROPERTIES
  {
    Date=09-04-13;
    Time=09:32:32;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    Width=12650;
    Height=6710;
    TableBoxID=1000000000;
    SourceTable=Table50002;
    DataCaptionFields=Object Model Code;
  }
  CONTROLS
  {
    { 1000000000;TableBox;220 ;220  ;12210;5500 ;HorzGlue=Both;
                                                 VertGlue=Both }
    { 1000000001;TextBox;0    ;0    ;4400 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr=Name }
    { 1000000002;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000001;
                                                 InColumnHeading=Yes }
    { 1000000006;TextBox;4212 ;2200 ;5500 ;440  ;HorzGlue=Both;
                                                 ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 CaptionML=ENU=Values;
                                                 SourceExpr=Values();
                                                 OnAssistEdit=BEGIN
                                                                ValuesAssistEdit();
                                                              END;
                                                               }
    { 1000000007;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000006;
                                                 InColumnHeading=Yes }
    { 1000000010;TextBox;8213 ;770  ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="No. of Times Used" }
    { 1000000011;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000010;
                                                 InColumnHeading=Yes }
    { 1000000012;TextBox;9165 ;2750 ;4400 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr=URL }
    { 1000000013;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000012;
                                                 InColumnHeading=Yes }
    { 1000000003;CommandButton;2970;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Default=Yes;
                                                 PushAction=LookupOK;
                                                 InvalidActionAppearance=Hide }
    { 1000000004;CommandButton;5390;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Cancel=Yes;
                                                 PushAction=LookupCancel;
                                                 InvalidActionAppearance=Hide }
    { 1000000005;CommandButton;10230;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
    { 1000000008;MenuButton;7810;5940;2200;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 CaptionML=ENU=F&unctions;
                                                 Menu=MENUITEMS
                                                 {
                                                   { ID=1000000009;
                                                     CaptionML=ENU=Generate Property;
                                                     OnPush=VAR
                                                              Enumeration@1000000000 : Record 50002;
                                                            BEGIN
                                                              Enumeration := Rec;
                                                              CODEUNIT.RUN(CODEUNIT::"Export Object Model Descriptn.", Enumeration);
                                                            END;
                                                             }
                                                 }
                                                  }
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Form 50003 Enumeration Values
{
  OBJECT-PROPERTIES
  {
    Date=16-04-13;
    Time=15:27:53;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    Width=9790;
    Height=6710;
    TableBoxID=1000000000;
    SourceTable=Table50003;
    AutoSplitKey=Yes;
    DataCaptionFields=Enumeration Name;
  }
  CONTROLS
  {
    { 1000000000;TableBox;220 ;220  ;9350 ;5500 ;HorzGlue=Both;
                                                 VertGlue=Both }
    { 1000000001;TextBox;0    ;0    ;1700 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="No." }
    { 1000000002;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000001;
                                                 InColumnHeading=Yes }
    { 1000000003;TextBox;0    ;0    ;4400 ;0    ;HorzGlue=Both;
                                                 ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr=Value }
    { 1000000004;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000003;
                                                 InColumnHeading=Yes }
    { 1000000005;CommandButton;2530;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Default=Yes;
                                                 PushAction=LookupOK;
                                                 InvalidActionAppearance=Hide }
    { 1000000006;CommandButton;4950;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Cancel=Yes;
                                                 PushAction=LookupCancel;
                                                 InvalidActionAppearance=Hide }
    { 1000000007;CommandButton;7370;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Form 50004 Items
{
  OBJECT-PROPERTIES
  {
    Date=11-05-13;
    Time=18:08:34;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    Width=18810;
    Height=6710;
    TableBoxID=1000000000;
    SourceTable=Table50005;
    SourceTableView=SORTING(Object Model Code,Name Path);
    DataCaptionFields=Object Model Code;
  }
  CONTROLS
  {
    { 1000000000;TableBox;220 ;220  ;18370;5500 ;HorzGlue=Both;
                                                 VertGlue=Both }
    { 1000000001;TextBox;0    ;0    ;4400 ;0    ;HorzGlue=Both;
                                                 ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr=Name;
                                                 OnFormat=BEGIN
                                                            IF "Base Type" <> '' THEN
                                                              CurrForm.Name.UPDATEINDENT(220);
                                                          END;
                                                           }
    { 1000000002;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000001;
                                                 InColumnHeading=Yes }
    { 1000000003;TextBox;0    ;0    ;4400 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Base Type";
                                                 OnAfterValidate=BEGIN
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 1000000004;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000003;
                                                 InColumnHeading=Yes }
    { 1000000005;CheckBox;0   ;0    ;1700 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 ShowCaption=No;
                                                 SourceExpr=Creatable }
    { 1000000006;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000005;
                                                 InColumnHeading=Yes }
    { 1000000007;CheckBox;0   ;0    ;1700 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 ShowCaption=No;
                                                 SourceExpr=Abstract }
    { 1000000008;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000007;
                                                 InColumnHeading=Yes }
    { 1000000017;TextBox;14076;330  ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="No. of Attributes" }
    { 1000000018;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000017;
                                                 InColumnHeading=Yes }
    { 1000000021;TextBox;14838;550  ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="No. of Times Used (Attributes)" }
    { 1000000022;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000021;
                                                 InColumnHeading=Yes }
    { 1000000023;TextBox;17293;330  ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="No. of Times Used (Collectns.)" }
    { 1000000024;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000023;
                                                 InColumnHeading=Yes }
    { 1000000019;TextBox;15776;330  ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="No. of Derived Types" }
    { 1000000020;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000019;
                                                 InColumnHeading=Yes }
    { 1000000011;CommandButton;9130;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Default=Yes;
                                                 PushAction=LookupOK;
                                                 InvalidActionAppearance=Hide }
    { 1000000012;CommandButton;11550;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Cancel=Yes;
                                                 PushAction=LookupCancel;
                                                 InvalidActionAppearance=Hide }
    { 1000000013;CommandButton;16430;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
    { 1000000014;MenuButton;13970;5940;2200;550 ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 CaptionML=ENU=&Item;
                                                 Menu=MENUITEMS
                                                 {
                                                   { ID=1000000015;
                                                     PushAction=RunObject;
                                                     CaptionML=ENU=Attributes;
                                                     RunObject=Form 50006;
                                                     RunFormLinkType=OnUpdate;
                                                     RunFormView=SORTING(Object Model Code,Container Type,Container Name,Name);
                                                     RunFormLink=Object Model Code=FIELD(Object Model Code),
                                                                 Container Type=CONST(Item),
                                                                 Container Name=FIELD(Name) }
                                                   { ID=1000000016;
                                                     PushAction=RunObject;
                                                     CaptionML=ENU=Derived Types;
                                                     RunObject=Form 50004;
                                                     RunFormLinkType=OnUpdate;
                                                     RunFormView=SORTING(Object Model Code,Base Type);
                                                     RunFormLink=Object Model Code=FIELD(Object Model Code),
                                                                 Base Type=FIELD(Name) }
                                                 }
                                                  }
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Form 50005 Collections
{
  OBJECT-PROPERTIES
  {
    Date=23-08-13;
    Time=12:58:52;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    Width=12150;
    Height=6710;
    TableBoxID=1000000000;
    SourceTable=Table50007;
    DataCaptionFields=Object Model Code;
  }
  CONTROLS
  {
    { 1000000000;TableBox;220 ;220  ;11710;5500 ;HorzGlue=Both;
                                                 VertGlue=Both }
    { 1000000001;TextBox;0    ;0    ;1700 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Object Model Code" }
    { 1000000002;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000001;
                                                 InColumnHeading=Yes }
    { 1000000003;TextBox;0    ;0    ;4400 ;0    ;HorzGlue=Both;
                                                 ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr=Name }
    { 1000000004;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000003;
                                                 InColumnHeading=Yes }
    { 1000000005;TextBox;0    ;0    ;4400 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Item Type" }
    { 1000000006;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000005;
                                                 InColumnHeading=Yes }
    { 1000000014;TextBox;5609 ;440  ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Collection Style" }
    { 1000000015;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000014;
                                                 InColumnHeading=Yes }
    { 1000000010;CheckBox;9758;440  ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 ShowCaption=No;
                                                 SourceExpr="Generate Insert Method" }
    { 1000000011;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000010;
                                                 InColumnHeading=Yes }
    { 1100476000;CheckBox;13732;550 ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 ShowCaption=No;
                                                 SourceExpr="Generate Remove Method" }
    { 1100476001;Label  ;0    ;0    ;0    ;0    ;ParentControl=1100476000;
                                                 InColumnHeading=Yes }
    { 1000000012;TextBox;9652 ;440  ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="No. of Times Used (Attributes)" }
    { 1000000013;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000012;
                                                 InColumnHeading=Yes }
    { 1000000007;CommandButton;4890;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Default=Yes;
                                                 PushAction=LookupOK;
                                                 InvalidActionAppearance=Hide }
    { 1000000008;CommandButton;7310;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Cancel=Yes;
                                                 PushAction=LookupCancel;
                                                 InvalidActionAppearance=Hide }
    { 1000000009;CommandButton;9730;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Form 50006 Attributes
{
  OBJECT-PROPERTIES
  {
    Date=02-02-14;
    Time=11:25:43;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    Width=16500;
    Height=6710;
    TableBoxID=1000000000;
    SourceTable=Table50009;
    DelayedInsert=Yes;
    SourceTableView=SORTING(Object Model Code,Container Type,Container Name,Sort Order);
    DataCaptionFields=Container Type,Container Name;
    OnActivateForm=BEGIN
                     CurrForm."Container Type".VISIBLE := ContainerTypeVisible;
                     CurrForm."Container Name".VISIBLE := ContainerNameVisible;
                   END;

  }
  CONTROLS
  {
    { 1000000000;TableBox;220 ;220  ;16060;5500 ;HorzGlue=Both;
                                                 VertGlue=Both }
    { 1000000001;TextBox;0    ;0    ;1700 ;0    ;Visible=No;
                                                 ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Object Model Code" }
    { 1000000002;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000001;
                                                 InColumnHeading=Yes }
    { 1000000003;TextBox;0    ;0    ;550  ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Container Type" }
    { 1000000004;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000003;
                                                 InColumnHeading=Yes }
    { 1000000005;TextBox;0    ;0    ;4400 ;0    ;HorzGlue=Both;
                                                 ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Container Name" }
    { 1000000006;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000005;
                                                 InColumnHeading=Yes }
    { 1000000007;TextBox;0    ;0    ;4403 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr=Name }
    { 1000000008;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000007;
                                                 InColumnHeading=Yes }
    { 1000000009;TextBox;0    ;0    ;1700 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr=Type }
    { 1000000010;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000009;
                                                 InColumnHeading=Yes }
    { 1000000011;TextBox;0    ;0    ;4400 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Type Name" }
    { 1000000012;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000011;
                                                 InColumnHeading=Yes }
    { 1000000013;TextBox;0    ;0    ;4400 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Field Name" }
    { 1000000014;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000013;
                                                 InColumnHeading=Yes }
    { 1100476002;CheckBox;28617;440 ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 ShowCaption=No;
                                                 SourceExpr="Dictionary Key" }
    { 1100476003;Label  ;0    ;0    ;0    ;0    ;ParentControl=1100476002;
                                                 InColumnHeading=Yes }
    { 1000000015;TextBox;0    ;0    ;1700 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr=Initialization }
    { 1000000016;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000015;
                                                 InColumnHeading=Yes }
    { 1000000017;TextBox;0    ;0    ;4400 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Field Declaration Init Value" }
    { 1000000018;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000017;
                                                 InColumnHeading=Yes }
    { 1100476000;CheckBox;26961;330 ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 ShowCaption=No;
                                                 SourceExpr="Format/Args Ctor Params" }
    { 1100476001;Label  ;0    ;0    ;0    ;0    ;ParentControl=1100476000;
                                                 InColumnHeading=Yes }
    { 1000000019;CheckBox;0   ;0    ;1700 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 ShowCaption=No;
                                                 SourceExpr="Has Setter" }
    { 1000000020;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000019;
                                                 InColumnHeading=Yes }
    { 1000000028;CheckBox;29104;1760;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 ShowCaption=No;
                                                 SourceExpr=Abstract }
    { 1000000029;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000028;
                                                 InColumnHeading=Yes }
    { 1000000030;CheckBox;30501;220 ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 ShowCaption=No;
                                                 SourceExpr=Override }
    { 1000000031;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000030;
                                                 InColumnHeading=Yes }
    { 1000000032;CheckBox;32089;770 ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 ShowCaption=No;
                                                 SourceExpr=Nullable }
    { 1000000033;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000032;
                                                 InColumnHeading=Yes }
    { 1000000024;TextBox;6265 ;440  ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Sort Order";
                                                 OnAfterValidate=BEGIN
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 1000000025;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000024;
                                                 InColumnHeading=Yes }
    { 1000000026;TextBox;31115;440  ;4400 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr=URL }
    { 1000000027;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000026;
                                                 InColumnHeading=Yes }
    { 1000000021;CommandButton;6820;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Default=Yes;
                                                 PushAction=LookupOK;
                                                 InvalidActionAppearance=Hide }
    { 1000000022;CommandButton;9240;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Cancel=Yes;
                                                 PushAction=LookupCancel;
                                                 InvalidActionAppearance=Hide }
    { 1000000023;CommandButton;14080;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
    { 1000000034;MenuButton;11660;5940;2200;550 ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 CaptionML=ENU=F&unctions;
                                                 Menu=MENUITEMS
                                                 {
                                                   { ID=1000000035;
                                                     CaptionML=ENU=Create Property Type;
                                                     OnPush=BEGIN
                                                              CreatePropertyTypeFromAttrib;
                                                            END;
                                                             }
                                                 }
                                                  }
  }
  CODE
  {

    PROCEDURE ContainerTypeVisible@1000000000() : Boolean;
    BEGIN
      IF GETFILTER("Container Type") = '' THEN
        EXIT(TRUE);

      IF GETRANGEMIN("Container Type") <> GETRANGEMAX("Container Type") THEN
        EXIT(TRUE);
    END;

    PROCEDURE ContainerNameVisible@1000000001() : Boolean;
    BEGIN
      IF GETFILTER("Container Name") = '' THEN
        EXIT(TRUE);

      IF GETRANGEMIN("Container Name") <> GETRANGEMAX("Container Name") THEN
        EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

OBJECT Form 50014 Property Types
{
  OBJECT-PROPERTIES
  {
    Date=10-05-13;
    Time=20:45:42;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    Width=16500;
    Height=6710;
    TableBoxID=1000000000;
    SourceTable=Table50014;
  }
  CONTROLS
  {
    { 1000000000;TableBox;220 ;220  ;16060;5500 ;HorzGlue=Both;
                                                 VertGlue=Both }
    { 1000000001;TextBox;0    ;0    ;1700 ;0    ;Visible=No;
                                                 ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Object Model Code" }
    { 1000000002;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000001;
                                                 InColumnHeading=Yes }
    { 1000000003;TextBox;0    ;0    ;4400 ;0    ;HorzGlue=Both;
                                                 ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr=Name }
    { 1000000004;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000003;
                                                 InColumnHeading=Yes }
    { 1000000005;TextBox;0    ;0    ;550  ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Encapsulated Type" }
    { 1000000006;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000005;
                                                 InColumnHeading=Yes }
    { 1000000007;TextBox;0    ;0    ;4400 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Encapsulated Name" }
    { 1000000008;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000007;
                                                 InColumnHeading=Yes }
    { 1000000009;TextBox;0    ;0    ;550  ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Has Setter" }
    { 1000000010;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000009;
                                                 InColumnHeading=Yes }
    { 1000000011;TextBox;0    ;0    ;4400 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="HasValue Expression" }
    { 1000000012;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000011;
                                                 InColumnHeading=Yes }
    { 1000000013;TextBox;0    ;0    ;4400 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Initial Value Expression" }
    { 1000000014;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000013;
                                                 InColumnHeading=Yes }
    { 1000000015;TextBox;0    ;0    ;1700 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="No. of Times Used" }
    { 1000000016;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000015;
                                                 InColumnHeading=Yes }
    { 1000000017;CommandButton;9240;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Default=Yes;
                                                 PushAction=LookupOK;
                                                 InvalidActionAppearance=Hide }
    { 1000000018;CommandButton;11660;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Cancel=Yes;
                                                 PushAction=LookupCancel;
                                                 InvalidActionAppearance=Hide }
    { 1000000019;CommandButton;14080;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Form 50015 Property Collections
{
  OBJECT-PROPERTIES
  {
    Date=03-06-13;
    Time=08:46:44;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    Width=9790;
    Height=6710;
    TableBoxID=1000000000;
    SourceTable=Table50015;
  }
  CONTROLS
  {
    { 1000000000;TableBox;220 ;220  ;9350 ;5500 ;HorzGlue=Both;
                                                 VertGlue=Both }
    { 1000000001;TextBox;0    ;0    ;1700 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Object Model Code" }
    { 1000000002;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000001;
                                                 InColumnHeading=Yes }
    { 1000000003;TextBox;0    ;0    ;4400 ;0    ;HorzGlue=Both;
                                                 ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr=Name }
    { 1000000004;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000003;
                                                 InColumnHeading=Yes }
    { 1000000010;CheckBox;5546;2200 ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 ShowCaption=No;
                                                 SourceExpr=Export }
    { 1000000011;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000010;
                                                 InColumnHeading=Yes }
    { 1000000005;TextBox;0    ;0    ;1700 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="No. of Members" }
    { 1000000006;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000005;
                                                 InColumnHeading=Yes }
    { 1000000012;TextBox;9758 ;330  ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="No. of Sorted Members" }
    { 1000000013;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000012;
                                                 InColumnHeading=Yes }
    { 1000000007;CommandButton;2530;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Default=Yes;
                                                 PushAction=LookupOK;
                                                 InvalidActionAppearance=Hide }
    { 1000000008;CommandButton;4950;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Cancel=Yes;
                                                 PushAction=LookupCancel;
                                                 InvalidActionAppearance=Hide }
    { 1000000009;CommandButton;7370;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Form 50016 Property Collection Members
{
  OBJECT-PROPERTIES
  {
    Date=26-07-13;
    Time=20:36:28;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    Width=16500;
    Height=6710;
    TableBoxID=1000000000;
    SourceTable=Table50016;
  }
  CONTROLS
  {
    { 1000000000;TableBox;220 ;220  ;16060;5500 ;HorzGlue=Both;
                                                 VertGlue=Both }
    { 1000000001;TextBox;0    ;0    ;1700 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Object Model Code" }
    { 1000000002;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000001;
                                                 InColumnHeading=Yes }
    { 1000000003;TextBox;0    ;0    ;4400 ;0    ;HorzGlue=Both;
                                                 ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Property Collection Name" }
    { 1000000004;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000003;
                                                 InColumnHeading=Yes }
    { 1000000005;TextBox;0    ;0    ;4400 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr=Name }
    { 1000000006;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000005;
                                                 InColumnHeading=Yes }
    { 1000000007;TextBox;0    ;0    ;4400 ;0    ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Property Type" }
    { 1000000008;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000007;
                                                 InColumnHeading=Yes }
    { 1000000012;TextBox;15176;440  ;4400 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Field Name" }
    { 1000000013;Label  ;0    ;0    ;0    ;0    ;ParentControl=1000000012;
                                                 InColumnHeading=Yes }
    { 1100476000;TextBox;18574;440  ;1700 ;440  ;ParentControl=1000000000;
                                                 InColumn=Yes;
                                                 SourceExpr="Sort Order";
                                                 OnAfterValidate=BEGIN
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 1100476001;Label  ;0    ;0    ;0    ;0    ;ParentControl=1100476000;
                                                 InColumnHeading=Yes }
    { 1000000009;CommandButton;9240;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Default=Yes;
                                                 PushAction=LookupOK;
                                                 InvalidActionAppearance=Hide }
    { 1000000010;CommandButton;11660;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Cancel=Yes;
                                                 PushAction=LookupCancel;
                                                 InvalidActionAppearance=Hide }
    { 1000000011;CommandButton;14080;5940;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Form 50020 Object Model Assembly Info
{
  OBJECT-PROPERTIES
  {
    Date=18-06-13;
    Time=13:07:13;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    Width=15120;
    Height=8910;
    SourceTable=Table50000;
  }
  CONTROLS
  {
    { 1000000000;TabControl;220;220 ;14680;7700 ;HorzGlue=Both;
                                                 VertGlue=Both;
                                                 PageNamesML=ENU=General }
    { 1000000001;TextBox;3850 ;990  ;5500 ;440  ;ParentControl=1000000000;
                                                 InPage=0;
                                                 SourceExpr="Assembly Info File Name" }
    { 1000000002;Label  ;440  ;990  ;3300 ;440  ;ParentControl=1000000001 }
    { 1000000005;TextBox;3850 ;1540 ;5500 ;440  ;ParentControl=1000000000;
                                                 InPage=0;
                                                 SourceExpr="Assembly Title" }
    { 1000000006;Label  ;440  ;1540 ;3300 ;440  ;ParentControl=1000000005 }
    { 1000000007;TextBox;3850 ;2090 ;5500 ;440  ;ParentControl=1000000000;
                                                 InPage=0;
                                                 SourceExpr="Assembly Description" }
    { 1000000008;Label  ;440  ;2090 ;3300 ;440  ;ParentControl=1000000007 }
    { 1000000009;TextBox;3850 ;2640 ;5500 ;440  ;ParentControl=1000000000;
                                                 InPage=0;
                                                 SourceExpr="Assembly Company" }
    { 1000000010;Label  ;440  ;2640 ;3300 ;440  ;ParentControl=1000000009 }
    { 1000000011;TextBox;3850 ;3190 ;5500 ;440  ;ParentControl=1000000000;
                                                 InPage=0;
                                                 SourceExpr="Assembly Product Name" }
    { 1000000012;Label  ;440  ;3190 ;3300 ;440  ;ParentControl=1000000011 }
    { 1000000013;TextBox;3850 ;3740 ;5500 ;440  ;ParentControl=1000000000;
                                                 InPage=0;
                                                 SourceExpr="Assembly Copyright" }
    { 1000000014;Label  ;440  ;3740 ;3300 ;440  ;ParentControl=1000000013 }
    { 1000000015;TextBox;12980;990  ;1700 ;440  ;ParentControl=1000000000;
                                                 InPage=0;
                                                 SourceExpr="Major Version No." }
    { 1000000016;Label  ;9570 ;990  ;3300 ;440  ;ParentControl=1000000015 }
    { 1000000017;TextBox;12980;1540 ;1700 ;440  ;ParentControl=1000000000;
                                                 InPage=0;
                                                 SourceExpr="Minor Version No." }
    { 1000000018;Label  ;9570 ;1540 ;3300 ;440  ;ParentControl=1000000017 }
    { 1000000019;TextBox;12980;2090 ;1700 ;440  ;ParentControl=1000000000;
                                                 InPage=0;
                                                 SourceExpr="Build No." }
    { 1000000020;Label  ;9570 ;2090 ;3300 ;440  ;ParentControl=1000000019 }
    { 1000000021;TextBox;12980;2640 ;1700 ;440  ;ParentControl=1000000000;
                                                 InPage=0;
                                                 SourceExpr="Revision No." }
    { 1000000022;Label  ;9570 ;2640 ;3300 ;440  ;ParentControl=1000000021 }
    { 1000000023;CommandButton;12650;8140;2200;550;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Codeunit 1 ApplicationManagement
{
  OBJECT-PROPERTIES
  {
    Date=08-04-13;
    Time=15:52:17;
    Modified=Yes;
    Version List=NAVW16.00.10;
  }
  PROPERTIES
  {
    Permissions=TableData 17=r,
                TableData 51=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE CompanyOpen@1() : Integer;
    BEGIN
      EXIT(FORM::"Object Models");
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50000 Generate Object Model
{
  OBJECT-PROPERTIES
  {
    Date=07-12-13;
    Time=13:26:20;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            GenerateObjectModel('CORE');
          END;

  }
  CODE
  {

    PROCEDURE GenerateObjectModel@1000000000(ObjectModelCode@1000000000 : Code[10]);
    VAR
      ObjectModel@1000000001 : Record 50000;
      ExportObjectModelDescriptn@1000000005 : Codeunit 50004;
      ExportObjectModel@1000000002 : Codeunit 50001;
      ExportPartials@1000000006 : Codeunit 50006;
      ExportAssemblyInfo@1000000003 : Codeunit 50002;
      CompileObjectModel@1000000004 : Codeunit 50003;
      ExportGeneratorObjects@1100476000 : Codeunit 50005;
    BEGIN
      ExportGeneratorObjects.RUN;

      ObjectModel.GET(ObjectModelCode);
      ObjectModel.VALIDATE("Build No.", ObjectModel."Build No." + 1);
      ObjectModel.MODIFY(TRUE);

      ExportObjectModelDescriptn.ExportObjectModelDescription(ObjectModelCode);
      ExportObjectModel.ExportObjectModel(ObjectModelCode);
      ExportPartials.ExportPartials(ObjectModelCode);
      ExportAssemblyInfo.ExportAssemblyInfo(ObjectModelCode);
      CompileObjectModel.CompileObjectModel(ObjectModelCode);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50001 Export Object Model
{
  OBJECT-PROPERTIES
  {
    Date=28-06-14;
    Time=10:30:23;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            ExportObjectModel('CORE');
          END;

  }
  CODE
  {
    VAR
      Text000@1100476000 : TextConst 'ENU=Too many ctor params.';

    PROCEDURE ExportObjectModel@1000000051(ObjectModelCode@1000000000 : Code[10]);
    VAR
      ObjectModel@1000000002 : Record 50000;
      OutputFile@1000000001 : File;
    BEGIN
      ObjectModel.GET(ObjectModelCode);
      ObjectModel.TESTFIELD("Object Model Source File Name");

      OutputFile.TEXTMODE := TRUE;
      OutputFile.WRITEMODE := TRUE;
      OutputFile.QUERYREPLACE := FALSE;
      OutputFile.CREATE(ObjectModel."Object Model Source File Name");

      WriteUsings(ObjectModel, OutputFile);
      WriteStartNamespace(ObjectModel, OutputFile);
      WritePropertyTypes(ObjectModel, OutputFile);
      WritePropertyCollections(ObjectModel, OutputFile);
      WriteItems(ObjectModel, OutputFile);
      WriteCollections(ObjectModel, OutputFile);
      WriteEnumerations(ObjectModel, OutputFile);
      WriteEndNamespace(ObjectModel, OutputFile);

      OutputFile.CLOSE;
    END;

    PROCEDURE WriteUsings@1000000005(ObjectModel@1000000001 : Record 50000;VAR OutputFile@1000000000 : File);
    BEGIN
      WriteUsingsForImportedTypes(ObjectModel, OutputFile);

      OutputFile.WRITE('using System.Text;');
      OutputFile.WRITE('using System.Linq;');
      OutputFile.WRITE('using System.Collections;');
      OutputFile.WRITE('using System.Collections.Generic;');
      OutputFile.WRITE('');
    END;

    PROCEDURE WriteUsingsForImportedTypes@1000000043(ObjectModel@1000000002 : Record 50000;VAR OutputFile@1000000000 : File);
    VAR
      ImportedType@1000000001 : Record 50001;
    BEGIN
      ImportedType.SETCURRENTKEY(Namespace);
      ImportedType.SETRANGE("Object Model Code", ObjectModel.Code);

      IF ImportedType.FINDSET THEN
        REPEAT
        OutputFile.WRITE(STRSUBSTNO('using %1;', ImportedType.Namespace));

        ImportedType.SETRANGE(Namespace, ImportedType.Namespace);
        ImportedType.FINDLAST;
        ImportedType.SETRANGE(Namespace);
        UNTIL ImportedType.NEXT = 0;
    END;

    PROCEDURE WriteStartNamespace@1000000007(ObjectModel@1000000001 : Record 50000;VAR OutputFile@1000000000 : File);
    BEGIN
      ObjectModel.TESTFIELD("Object Model Namespace");

      OutputFile.WRITE(STRSUBSTNO('namespace %1', ObjectModel."Object Model Namespace"));
      OutputFile.WRITE('{');
    END;

    PROCEDURE WriteEnumerations@1000000000(ObjectModel@1000000001 : Record 50000;VAR OutputFile@1000000000 : File);
    VAR
      Enumeration@1000000002 : Record 50002;
    BEGIN
      Enumeration.SETRANGE("Object Model Code", ObjectModel.Code);

      IF Enumeration.FINDSET THEN BEGIN
        OutputFile.WRITE('    #region Enumerations');

        REPEAT
          Enumeration.Write(OutputFile);
        UNTIL Enumeration.NEXT = 0;

        OutputFile.WRITE('    #endregion');
      END;
    END;

    PROCEDURE WritePropertyTypes@1000000001(ObjectModel@1000000000 : Record 50000;VAR OutputFile@1000000001 : File);
    VAR
      PropertyType@1000000002 : Record 50014;
    BEGIN
      OutputFile.WRITE('    #region Property Types');
      OutputFile.WRITE('');
      OutputFile.WRITE('    [Serializable]');
      OutputFile.WRITE('    public abstract class Property');
      OutputFile.WRITE('    {');
      OutputFile.WRITE('        private string name;');
      OutputFile.WRITE('');
      OutputFile.WRITE('        internal Property(string name)');
      OutputFile.WRITE('        {');
      OutputFile.WRITE('            this.name = name;');
      OutputFile.WRITE('        }');
      OutputFile.WRITE('');
      OutputFile.WRITE('        public abstract bool HasValue');
      OutputFile.WRITE('        {');
      OutputFile.WRITE('            get;');
      OutputFile.WRITE('        }');
      OutputFile.WRITE('');
      OutputFile.WRITE('        public string Name');
      OutputFile.WRITE('        {');
      OutputFile.WRITE('            get');
      OutputFile.WRITE('            {');
      OutputFile.WRITE('                return this.name;');
      OutputFile.WRITE('            }');
      OutputFile.WRITE('        }');
      OutputFile.WRITE('    }');
      OutputFile.WRITE('');

      PropertyType.SETRANGE("Object Model Code", ObjectModel.Code);

      IF PropertyType.FINDSET THEN BEGIN
        REPEAT
          WritePropertyType(PropertyType, OutputFile);
        UNTIL PropertyType.NEXT = 0;

        OutputFile.WRITE('    #endregion');
      END;
    END;

    PROCEDURE WritePropertyType@1000000017(PropertyType@1000000000 : Record 50014;VAR OutputFile@1000000001 : File);
    VAR
      ImportedType@1100476000 : Record 50001;
    BEGIN
      PropertyType.TESTFIELD("HasValue Expression");
      PropertyType.TESTFIELD("Initial Value Expression");

      OutputFile.WRITE('    [Serializable]');
      OutputFile.WRITE(STRSUBSTNO('    public class %1 : Property', PropertyType.Name));
      OutputFile.WRITE('    {');
      OutputFile.WRITE(PropertyTypeValueFieldDecl(PropertyType));
      OutputFile.WRITE('');
      OutputFile.WRITE(STRSUBSTNO('        internal %1(string name) : base(name)', PropertyType.Name));
      OutputFile.WRITE('        {');
      OutputFile.WRITE('        }');
      OutputFile.WRITE('');
      OutputFile.WRITE('        public override bool HasValue');
      OutputFile.WRITE('        {');
      OutputFile.WRITE('            get');
      OutputFile.WRITE('            {');
      OutputFile.WRITE(STRSUBSTNO('                return %1;', PropertyType."HasValue Expression"));
      OutputFile.WRITE('            }');
      OutputFile.WRITE('        }');
      OutputFile.WRITE('');

      CASE PropertyType."Encapsulated Type" OF
        PropertyType."Encapsulated Type"::Enumeration:
          OutputFile.WRITE(STRSUBSTNO('        public %1? Value', PropertyType."Encapsulated Name"));
        PropertyType."Encapsulated Type"::"Imported Type":
          BEGIN
            ImportedType.GET(PropertyType."Object Model Code", PropertyType."Encapsulated Name");
            OutputFile.WRITE(STRSUBSTNO('        public %1.%2 Value', ImportedType.Namespace, PropertyType."Encapsulated Name"));
          END;
      ELSE
        OutputFile.WRITE(STRSUBSTNO('        public %1 Value', PropertyType."Encapsulated Name"));
      END;

      OutputFile.WRITE('        {');
      OutputFile.WRITE('            get');
      OutputFile.WRITE('            {');
      OutputFile.WRITE('                return this.value;');
      OutputFile.WRITE('            }');

      IF PropertyType."Has Setter" = PropertyType."Has Setter"::Yes THEN BEGIN
        OutputFile.WRITE('            set');
        OutputFile.WRITE('            {');
        OutputFile.WRITE('                this.value = value;');
        OutputFile.WRITE('            }');
      END;

      OutputFile.WRITE('        }');
      OutputFile.WRITE('    }');
      OutputFile.WRITE('');
    END;

    PROCEDURE PropertyTypeValueFieldDecl@1000000002(PropertyType@1000000000 : Record 50014) Result : Text[1024];
    VAR
      ImportedType@1100476000 : Record 50001;
    BEGIN
      CASE TRUE OF
        PropertyType."Encapsulated Type" = PropertyType."Encapsulated Type"::Enumeration:
          Result :=
            STRSUBSTNO(
              '        private %1? value = %2;',
              PropertyType."Encapsulated Name",
              PropertyType."Initial Value Expression");
        PropertyType."Encapsulated Type" = PropertyType."Encapsulated Type"::"Imported Type":
          BEGIN
          ImportedType.GET(PropertyType."Object Model Code", PropertyType."Encapsulated Name");
          Result :=
            STRSUBSTNO(
              '        private %1.%2 value = %3;',
              ImportedType.Namespace,
              PropertyType."Encapsulated Name",
              PropertyType."Initial Value Expression");
          END;
      ELSE
        Result :=
          STRSUBSTNO(
            '        private %1 value = %2;',
            PropertyType."Encapsulated Name",
            PropertyType."Initial Value Expression");
      END;
    END;

    PROCEDURE WritePropertyCollections@1000000019(ObjectModel@1000000000 : Record 50000;VAR OutputFile@1000000001 : File);
    VAR
      PropertyCollection@1000000002 : Record 50015;
    BEGIN
      PropertyCollection.SETCURRENTKEY(Export);
      PropertyCollection.SETRANGE("Object Model Code", ObjectModel.Code);
      PropertyCollection.SETRANGE(Export, TRUE);

      IF PropertyCollection.FINDSET THEN BEGIN
        OutputFile.WRITE('    #region Property Collections');

        REPEAT
          WritePropertyCollection(PropertyCollection, OutputFile);
        UNTIL PropertyCollection.NEXT = 0;

        OutputFile.WRITE('    #endregion');
      END;
    END;

    PROCEDURE WritePropertyCollection@1000000023(PropertyCollection@1000000000 : Record 50015;VAR OutputFile@1000000001 : File);
    BEGIN
      OutputFile.WRITE('    [Serializable]');
      OutputFile.WRITE(GetPropertyCollectionDeclaratn(PropertyCollection));
      OutputFile.WRITE('    {');

      WritePropertyCollectionFields(PropertyCollection, OutputFile);
      WritePropertyCollectionCtor(PropertyCollection, OutputFile);
      WritePropertyCollectionProps(PropertyCollection, OutputFile);
      WritePropertyCollectionIEnum(PropertyCollection, OutputFile);

      OutputFile.WRITE('    }');
      OutputFile.WRITE('');
    END;

    LOCAL PROCEDURE GetPropertyCollectionDeclaratn@1000000033(PropertyCollection@1000000000 : Record 50015) Result : Text[1024];
    BEGIN
      Result := STRSUBSTNO('    public class %1 : IEnumerable<Property>', PropertyCollection.Name);
    END;

    PROCEDURE WritePropertyCollectionFields@1000000029(PropertyCollection@1000000000 : Record 50015;VAR OutputFile@1000000001 : File);
    VAR
      PropertyCollectionMember@1000000002 : Record 50016;
    BEGIN
      OutputFile.WRITE('        private List<Property> innerList = new List<Property>();');

      PropertyCollectionMember.SETRANGE("Object Model Code", PropertyCollection."Object Model Code");
      PropertyCollectionMember.SETRANGE("Property Collection Name", PropertyCollection.Name);

      IF PropertyCollectionMember.FINDSET THEN BEGIN
        OutputFile.WRITE('');

        REPEAT
          OutputFile.WRITE(
            STRSUBSTNO(
              '        private %1 %2 = new %1("%3");',
              PropertyCollectionMember."Property Type",
              PropertyCollectionMember."Field Name",
              PropertyCollectionMember.Name));
        UNTIL PropertyCollectionMember.NEXT = 0;
      END;

      OutputFile.WRITE('');
    END;

    PROCEDURE WritePropertyCollectionCtor@1000000028(PropertyCollection@1000000000 : Record 50015;VAR OutputFile@1000000001 : File);
    VAR
      PropertyCollectionMember@1000000002 : Record 50016;
    BEGIN
      OutputFile.WRITE(STRSUBSTNO('        internal %1()', PropertyCollection.Name));
      OutputFile.WRITE('        {');

      PropertyCollectionMember.SETCURRENTKEY("Object Model Code", "Property Collection Name", "Sort Order");
      PropertyCollectionMember.SETRANGE("Object Model Code", PropertyCollection."Object Model Code");
      PropertyCollectionMember.SETRANGE("Property Collection Name", PropertyCollection.Name);

      IF PropertyCollectionMember.FINDSET THEN
        REPEAT
          OutputFile.WRITE(STRSUBSTNO('            innerList.Add(%1);', PropertyCollectionMember."Field Name"));
        UNTIL PropertyCollectionMember.NEXT = 0;

      OutputFile.WRITE('        }');
      OutputFile.WRITE('');
    END;

    PROCEDURE WritePropertyCollectionProps@1000000027(PropertyCollection@1000000001 : Record 50015;VAR OutputFile@1000000000 : File);
    VAR
      PropertyCollectionMember@1000000002 : Record 50016;
    BEGIN
      PropertyCollectionMember.SETRANGE("Object Model Code", PropertyCollection."Object Model Code");
      PropertyCollectionMember.SETRANGE("Property Collection Name", PropertyCollection.Name);

      IF PropertyCollectionMember.FINDSET THEN
        REPEAT
          WritePropertyCollectionProp(PropertyCollectionMember, OutputFile);
        UNTIL PropertyCollectionMember.NEXT = 0;
    END;

    PROCEDURE WritePropertyCollectionProp@1000000030(PropertyCollectionMember@1000000000 : Record 50016;VAR OutputFile@1000000001 : File);
    VAR
      ImportedType@1000000002 : Record 50001;
    BEGIN
      PropertyCollectionMember.CALCFIELDS("Encapsulated Type", "Encapsulated Name", "Has Setter");

      CASE PropertyCollectionMember."Encapsulated Type" OF
        PropertyCollectionMember."Encapsulated Type"::Enumeration:
          OutputFile.WRITE(
            STRSUBSTNO(
              '        public %1? %2',
              PropertyCollectionMember."Encapsulated Name",
              PropertyCollectionMember.Name));
        PropertyCollectionMember."Encapsulated Type"::"Imported Type":
          BEGIN
            ImportedType.GET(PropertyCollectionMember."Object Model Code", PropertyCollectionMember."Encapsulated Name");
            OutputFile.WRITE(
              STRSUBSTNO(
                '      public %1.%2 %3',
                ImportedType.Namespace,
                PropertyCollectionMember."Encapsulated Name",
                PropertyCollectionMember.Name));
          END;
      ELSE
        OutputFile.WRITE(
          STRSUBSTNO(
            '        public %1 %2',
            PropertyCollectionMember."Encapsulated Name",
            PropertyCollectionMember.Name));
      END;

      OutputFile.WRITE('        {');
      OutputFile.WRITE('            get');
      OutputFile.WRITE('            {');
      OutputFile.WRITE(STRSUBSTNO('                return this.%1.Value;', PropertyCollectionMember."Field Name"));
      OutputFile.WRITE('            }');

      IF PropertyCollectionMember."Has Setter" = PropertyCollectionMember."Has Setter"::Yes THEN BEGIN
        OutputFile.WRITE('            set');
        OutputFile.WRITE('            {');
        OutputFile.WRITE(STRSUBSTNO('                this.%1.Value = value;', PropertyCollectionMember."Field Name"));
        OutputFile.WRITE('            }');
      END;

      OutputFile.WRITE('        }');
      OutputFile.WRITE('');
    END;

    PROCEDURE WritePropertyCollectionIEnum@1000000032(PropertyCollection@1000000001 : Record 50015;VAR OutputFile@1000000000 : File);
    BEGIN
      OutputFile.WRITE('        public IEnumerator<Property> GetEnumerator()');
      OutputFile.WRITE('        {');
      OutputFile.WRITE('            return innerList.GetEnumerator();');
      OutputFile.WRITE('        }');
      OutputFile.WRITE('');
      OutputFile.WRITE('        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()');
      OutputFile.WRITE('        {');
      OutputFile.WRITE('            return innerList.GetEnumerator();');
      OutputFile.WRITE('        }');
      OutputFile.WRITE('');
    END;

    PROCEDURE WriteItems@1000000009(ObjectModel@1000000001 : Record 50000;VAR OutputFile@1000000000 : File);
    VAR
      Item@1000000002 : Record 50005;
    BEGIN
      Item.SETCURRENTKEY("Object Model Code", "Base Type");
      Item.SETRANGE("Object Model Code", ObjectModel.Code);

      IF Item.FINDSET THEN BEGIN
        OutputFile.WRITE('    #region Items');

        REPEAT
          WriteItem(Item, OutputFile);
        UNTIL Item.NEXT = 0;

        OutputFile.WRITE('    #endregion');
      END;
    END;

    PROCEDURE WriteItem@1000000010(Item@1000000001 : Record 50005;VAR OutputFile@1000000000 : File);
    BEGIN
      OutputFile.WRITE('    [Serializable]');
      OutputFile.WRITE(STRSUBSTNO('    %1', GetItemDeclaration(Item)));
      OutputFile.WRITE('    {');

      WriteItemFieldDeclarations(Item, OutputFile);
      WriteItemConstructor(Item, OutputFile);
      WriteItemProperties(Item, OutputFile);

      OutputFile.WRITE('    }');
      OutputFile.WRITE('');
    END;

    PROCEDURE GetItemDeclaration@1000000006(Item@1000000000 : Record 50005) Result : Text[250];
    BEGIN
      Result := 'public ';

      IF Item.Abstract THEN
        Result += 'abstract ';

      Result += 'partial class ';
      Result += Item.Name;

      IF Item."Base Type" <> '' THEN BEGIN
        Result += ' : ';
        Result += Item."Base Type";
      END;
    END;

    PROCEDURE WriteItemFieldDeclarations@1000000011(Item@1000000000 : Record 50005;VAR OutputFile@1000000001 : File);
    VAR
      Attribute@1000000002 : Record 50009;
      AnyFieldDeclarations@1000000003 : Boolean;
    BEGIN
      Attribute.SETCURRENTKEY("Object Model Code", "Container Type", "Container Name", "Sort Order");
      Attribute.SETRANGE("Object Model Code", Item."Object Model Code");
      Attribute.SETRANGE("Container Type", Attribute."Container Type"::Item);
      Attribute.SETRANGE("Container Name", Item.Name);
      Attribute.SETRANGE(Abstract, FALSE);
      Attribute.SETRANGE(Override, FALSE);

      IF Attribute.FINDSET THEN BEGIN
        AnyFieldDeclarations := TRUE;

        REPEAT
          WriteItemFieldDeclaration(Attribute, OutputFile);
        UNTIL Attribute.NEXT = 0;
      END;

      IF AnyFieldDeclarations THEN
        OutputFile.WRITE('');
    END;

    PROCEDURE WriteItemFieldDeclaration@1000000015(Attribute@1000000000 : Record 50009;VAR OutputFile@1000000001 : File);
    BEGIN
      OutputFile.WRITE(STRSUBSTNO('        %1;', GetItemFieldDeclaration(Attribute)));
    END;

    PROCEDURE GetItemFieldDeclaration@1000000018(Attribute@1000000000 : Record 50009) Result : Text[250];
    BEGIN
      Result := 'private ';
      Result += IIF(Attribute.Nullable, STRSUBSTNO('%1?', Attribute."Type Name"), Attribute."Type Name");
      Result += ' ';
      Result += Attribute."Field Name";

      CASE Attribute.Initialization OF
        Attribute.Initialization::Instantiate:
          BEGIN
            Result += ' = new ';
            Result += Attribute."Type Name";
            Result += '(';
            Result += ')';
          END;
        Attribute.Initialization::"Field Declaration":
          BEGIN
            Result += ' = ';
            Result += Attribute."Field Declaration Init Value";
          END;
      END;
    END;

    PROCEDURE ItemNeedsConstructor@1000000026(Item@1000000000 : Record 50005) : Boolean;
    BEGIN
      IF ItemOrBaseTypeHasCtorParams(Item) THEN
        EXIT(TRUE);

      IF NOT Item.Creatable THEN
        EXIT(TRUE);
    END;

    PROCEDURE ItemOrBaseTypeHasCtorParams@1000000034(Item@1000000000 : Record 50005) Result : Boolean;
    VAR
      BaseType@1000000001 : Record 50005;
      Attribute@1000000002 : Record 50009;
    BEGIN
      IF Item."Base Type" <> '' THEN BEGIN
        BaseType.GET(Item."Object Model Code", Item."Base Type");
        IF ItemOrBaseTypeHasCtorParams(BaseType) THEN
          EXIT(TRUE);
      END;

      Attribute.SETRANGE("Object Model Code", Item."Object Model Code");
      Attribute.SETRANGE("Container Type", Attribute."Container Type"::Item);
      Attribute.SETRANGE("Container Name", Item.Name);
      Attribute.SETRANGE(Initialization, Attribute.Initialization::"Constructor Parameter");

      IF NOT Attribute.ISEMPTY THEN
        EXIT(TRUE);
    END;

    PROCEDURE WriteItemConstructor@1000000014(Item@1000000001 : Record 50005;VAR OutputFile@1000000000 : File);
    VAR
      Attribute@1000000002 : Record 50009;
      Attribute2@1000000003 : Record 50009;
    BEGIN
      IF ItemNeedsConstructor(Item) THEN BEGIN
        OutputFile.WRITE(STRSUBSTNO('        %1', GetItemConstructorDeclaration(Item)));
        OutputFile.WRITE('        {');

        Attribute.SETRANGE("Object Model Code", Item."Object Model Code");
        Attribute.SETRANGE("Container Type", Attribute."Container Type"::Item);
        Attribute.SETRANGE("Container Name", Item.Name);
        Attribute.SETRANGE(Initialization, Attribute.Initialization::"Constructor Parameter");

        IF Attribute.FINDSET THEN
          REPEAT
            OutputFile.WRITE(STRSUBSTNO('            this.%1 = %1;', Attribute."Field Name"));
          UNTIL Attribute.NEXT = 0;

        OutputFile.WRITE('        }');
        OutputFile.WRITE('');
      END;
    END;

    PROCEDURE GetItemConstructorDeclaration@1000000022(Item@1000000000 : Record 50005) Result : Text[250];
    VAR
      BaseType@1000000004 : Record 50005;
      Attribute@1000000001 : Record 50009;
      Separator@1000000002 : Text[2];
      CallToBaseConstructor@1000000003 : Text[250];
    BEGIN
      CASE Item.Creatable OF
        FALSE: Result := 'internal ';
        TRUE: Result := 'public ';
      END;

      Result += Item.Name;
      Result += '(';

      Separator := '';
      Result += GetItemConstructorParameters(Item, TRUE, FALSE, Separator);

      Result += ')';

      IF Item."Base Type" <> '' THEN BEGIN
        BaseType.GET(Item."Object Model Code", Item."Base Type");

        Separator := '';
        CallToBaseConstructor := GetItemConstructorParameters(BaseType, FALSE, FALSE, Separator);

        IF CallToBaseConstructor <> '' THEN BEGIN
          Result += ' : base(';
          Result += CallToBaseConstructor;
          Result += ')'
        END;
      END;
    END;

    PROCEDURE GetItemConstructorParameters@1000000039(Item@1000000000 : Record 50005;IncludeTypeNames@1000000004 : Boolean;FormatAndArgs@1100476000 : Boolean;VAR Separator@1000000002 : Text[2]) Result : Text[250];
    VAR
      BaseType@1000000001 : Record 50005;
      Attribute@1000000003 : Record 50009;
      AttributeHasFormatAndArgs@1100476001 : Boolean;
    BEGIN
      IF Item."Base Type" <> '' THEN BEGIN
        BaseType.GET(Item."Object Model Code", Item."Base Type");
        Result += GetItemConstructorParameters(BaseType, IncludeTypeNames, FormatAndArgs, Separator);
      END;

      Attribute.SETCURRENTKEY("Object Model Code", "Container Type", "Container Name", "Sort Order");
      Attribute.SETRANGE("Object Model Code", Item."Object Model Code");
      Attribute.SETRANGE("Container Type", Attribute."Container Type"::Item);
      Attribute.SETRANGE("Container Name", Item.Name);
      Attribute.SETRANGE(Initialization, Attribute.Initialization::"Constructor Parameter");

      IF Attribute.FINDSET THEN
        REPEAT
          Result += Separator;

          AttributeHasFormatAndArgs :=
            (FormatAndArgs) AND
            (Attribute."Format/Args Ctor Params") AND
            (Attribute.Type = Attribute.Type::"Imported Type") AND
            (LOWERCASE(Attribute."Type Name") = 'string');

          CASE AttributeHasFormatAndArgs OF
            TRUE:
              BEGIN
                CASE IncludeTypeNames OF
                  TRUE: Result += 'string format, params object[] args';
                  FALSE: Result := 'string.Format(format, args)'
                END;
              END;
            FALSE:
              BEGIN
                IF IncludeTypeNames THEN BEGIN
                  Result += Attribute."Type Name";
                  Result += ' ';
                END;

                Result += Attribute."Field Name";

                // jhoek.280614.begin
                IF IncludeTypeNames THEN
                  IF Attribute."Ctor Parameter Default Value" <> '' THEN
                    Result += STRSUBSTNO(' = %1', Attribute."Ctor Parameter Default Value");
                // jhoek.280614.end
              END;
          END;

          Separator := ', ';
        UNTIL Attribute.NEXT = 0;
    END;

    PROCEDURE WriteItemProperties@1000000024(Item@1000000000 : Record 50005;VAR OutputFile@1000000001 : File);
    VAR
      Attribute@1000000002 : Record 50009;
    BEGIN
      Attribute.SETCURRENTKEY("Object Model Code", "Container Type", "Container Name", "Sort Order");
      Attribute.SETRANGE("Object Model Code", Item."Object Model Code");
      Attribute.SETRANGE("Container Type", Attribute."Container Type"::Item);
      Attribute.SETRANGE("Container Name", Item.Name);

      IF Attribute.FINDSET THEN
        REPEAT
          WriteItemProperty(Attribute, OutputFile);
        UNTIL Attribute.NEXT = 0;
    END;

    PROCEDURE WriteItemProperty@1000000025(Attribute@1000000000 : Record 50009;VAR OutputFile@1000000001 : File);
    BEGIN
      OutputFile.WRITE(STRSUBSTNO('        %1', GetItemPropertyDeclaration(Attribute)));

      OutputFile.WRITE('        {');

      CASE TRUE OF
        Attribute.Abstract:
          BEGIN
            OutputFile.WRITE('            get;');
          END;
        Attribute.Override:
          BEGIN
            OutputFile.WRITE('            get');
            OutputFile.WRITE('            {');
            OutputFile.WRITE(STRSUBSTNO('              return %1;', Attribute."Field Declaration Init Value"));
            OutputFile.WRITE('            }');
          END;
      ELSE
          BEGIN
            OutputFile.WRITE('            get');
            OutputFile.WRITE('            {');
            OutputFile.WRITE(STRSUBSTNO('                return this.%1;', Attribute."Field Name"));
            OutputFile.WRITE('            }');
          END;
      END;

      IF Attribute."Has Setter" THEN BEGIN
        OutputFile.WRITE('            set');
        OutputFile.WRITE('            {');
        OutputFile.WRITE(STRSUBSTNO('                this.%1 = value;', Attribute."Field Name"));
        OutputFile.WRITE('            }');
      END;

      OutputFile.WRITE('        }');
      OutputFile.WRITE('');
    END;

    PROCEDURE GetItemPropertyDeclaration@1000000031(Attribute@1000000000 : Record 50009) Result : Text[250];
    BEGIN
      Result := 'public ';
      Result += IIF(Attribute.Abstract, 'abstract ', '');
      Result += IIF(Attribute.Override, 'override ', '');
      Result += IIF(Attribute.Nullable, STRSUBSTNO('%1?', Attribute."Type Name"), Attribute."Type Name");
      Result += ' ';
      Result += Attribute.Name;
    END;

    PROCEDURE GetPropertyFieldDeclaration@1000000038(Attribute@1000000000 : Record 50009) Result : Text[250];
    BEGIN
      Result := 'private ';
      Result += Attribute."Type Name";
      Result += ' ';
      Result += Attribute."Field Name";

      CASE Attribute.Initialization OF
        Attribute.Initialization::Instantiate:
          BEGIN
            Result += ' = new ';
            Result += Attribute."Type Name";
            Result += '()';
          END;
        Attribute.Initialization::"Field Declaration":
          BEGIN
            Result += ' = ';
            Result += Attribute."Field Declaration Init Value";
          END;
      END;
    END;

    PROCEDURE GetPropertyPropertyDeclaration@1000000042(Attribute@1000000000 : Record 50009) Result : Text[250];
    BEGIN
      Result := 'public ';
      Result += Attribute."Type Name";
      Result += ' ';
      Result += Attribute.Name;
    END;

    PROCEDURE WriteCollections@1000000013(ObjectModel@1000000000 : Record 50000;VAR OutputFile@1000000001 : File);
    VAR
      Collection@1000000002 : Record 50007;
    BEGIN
      Collection.SETRANGE("Object Model Code", ObjectModel.Code);

      IF Collection.FINDSET THEN BEGIN
        OutputFile.WRITE('    #region Collections');

        REPEAT
          WriteCollection(Collection, OutputFile);
        UNTIL Collection.NEXT = 0;

        OutputFile.WRITE('    #endregion');
      END;
    END;

    PROCEDURE WriteCollection@1000000016(Collection@1000000000 : Record 50007;VAR OutputFile@1000000001 : File);
    VAR
      Item@1000000002 : Record 50005;
      Attribute@1000000003 : Record 50009;
    BEGIN
      OutputFile.WRITE('    [Serializable]');
      OutputFile.WRITE(STRSUBSTNO('    %1', GetCollectionDeclaration(Collection)));
      OutputFile.WRITE('    {');

      Collection.TESTFIELD("Item Type");

      CASE Collection."Collection Style" OF
        Collection."Collection Style"::List:
          OutputFile.WRITE(STRSUBSTNO('        private List<%1> innerList = new List<%1>();', Collection."Item Type"));
        Collection."Collection Style"::Dictionary:
          BEGIN
            Item.GET(Collection."Object Model Code", Collection."Item Type");
            IF Item."Base Type" <> '' THEN
              Item.GET(Collection."Object Model Code", Item."Base Type");

            Attribute.SETCURRENTKEY("Object Model Code", "Container Type", "Container Name", "Sort Order");
            Attribute.SETRANGE("Object Model Code", Collection."Object Model Code");
            Attribute.SETRANGE("Container Type", Attribute."Container Type"::Item);
            Attribute.SETRANGE("Container Name", Item.Name);
            Attribute.SETRANGE(Initialization, Attribute.Initialization::"Constructor Parameter");
            Attribute.SETRANGE("Dictionary Key", TRUE);
            Attribute.FINDFIRST();

            OutputFile.WRITE(
              STRSUBSTNO(
                '        private Dictionary<%1,%2> innerList = new Dictionary<%1,%2>();',
                Attribute."Type Name",
                Collection."Item Type"));
          END;
      END;

      OutputFile.WRITE('');

      WriteCollectionConstructor(Collection, OutputFile);

      CASE Collection."Collection Style" OF
        Collection."Collection Style"::List:
          BEGIN
            WriteCollectionFindIndexMethds(Collection, OutputFile);
            WriteCollectionAddMethods(Collection, '', OutputFile);
            WriteCollectionAddRangeMethod(Collection, OutputFile);
            WriteCollectionInsertMethod(Collection, OutputFile);
            WriteCollectionRemoveMethod(Collection, '', '', OutputFile);
          END;
        Collection."Collection Style"::Dictionary:
          BEGIN
            WriteCollectionAddMethods(Collection, Attribute."Field Name", OutputFile);
            WriteCollectionInsertMethod(Collection, OutputFile);
            WriteCollectionRemoveMethod(Collection, Attribute."Type Name", Attribute."Field Name", OutputFile);
          END;
      END;

      OutputFile.WRITE('');
      OutputFile.WRITE(STRSUBSTNO('        public IEnumerator<%1> GetEnumerator()', Collection."Item Type"));
      OutputFile.WRITE('        {');

      CASE Collection."Collection Style" OF
        Collection."Collection Style"::List: OutputFile.WRITE('            return innerList.GetEnumerator();');
        Collection."Collection Style"::Dictionary: OutputFile.WRITE('            return innerList.Values.GetEnumerator();');
      END;

      OutputFile.WRITE('        }');
      OutputFile.WRITE('');
      OutputFile.WRITE('        IEnumerator IEnumerable.GetEnumerator()');
      OutputFile.WRITE('        {');

      CASE Collection."Collection Style" OF
        Collection."Collection Style"::List: OutputFile.WRITE('            return innerList.GetEnumerator();');
        Collection."Collection Style"::Dictionary: OutputFile.WRITE('            return innerList.Values.GetEnumerator();');
      END;

      OutputFile.WRITE('        }');
      OutputFile.WRITE('    }');
      OutputFile.WRITE('');
    END;

    PROCEDURE GetCollectionDeclaration@1000000020(Collection@1000000000 : Record 50007) Result : Text[250];
    BEGIN
      Result := 'public class ';
      Result += Collection.Name;
      Result += ' : IEnumerable<';
      Result += Collection."Item Type";
      Result += '>';
    END;

    PROCEDURE WriteCollectionConstructor@1000000037(Collection@1000000000 : Record 50007;VAR OutputFile@1000000001 : File);
    BEGIN
      OutputFile.WRITE(STRSUBSTNO('        %1', GetCollectionConstructorDecl(Collection)));
      OutputFile.WRITE('        {');
      OutputFile.WRITE('        }');
      OutputFile.WRITE('');
    END;

    PROCEDURE GetCollectionConstructorDecl@1000000044(Collection@1000000000 : Record 50007) Result : Text[250];
    BEGIN
      Result := 'internal ';
      Result += Collection.Name;
      Result += '()';
    END;

    PROCEDURE WriteCollectionFindIndexMethds@1100476001(Collection@1100476000 : Record 50007;VAR OutputFile@1100476001 : File);
    BEGIN
      IF NOT Collection."Gen. FindIndex/FindLastIndex" THEN
        EXIT;

      OutputFile.WRITE(STRSUBSTNO('        public int FindIndex(Predicate<%1> match)', Collection."Item Type"));
      OutputFile.WRITE('        {');
      OutputFile.WRITE('            return innerList.FindIndex(match);');
      OutputFile.WRITE('        }');

      OutputFile.WRITE('');
      OutputFile.WRITE(STRSUBSTNO('        public int FindIndex(int startIndex, Predicate<%1> match)', Collection."Item Type"));
      OutputFile.WRITE('        {');
      OutputFile.WRITE('            return innerList.FindIndex(startIndex, match);');
      OutputFile.WRITE('        }');

      OutputFile.WRITE('');
      OutputFile.WRITE(STRSUBSTNO('        public int FindIndex(int startIndex, int count,Predicate<%1> match)', Collection."Item Type"));
      OutputFile.WRITE('        {');
      OutputFile.WRITE('            return innerList.FindIndex(startIndex, count, match);');
      OutputFile.WRITE('        }');

      OutputFile.WRITE('');
      OutputFile.WRITE(STRSUBSTNO('        public int FindLastIndex(Predicate<%1> match)', Collection."Item Type"));
      OutputFile.WRITE('        {');
      OutputFile.WRITE('            return innerList.FindLastIndex(match);');
      OutputFile.WRITE('        }');

      OutputFile.WRITE('');
      OutputFile.WRITE(STRSUBSTNO('        public int FindLastIndex(int startIndex, Predicate<%1> match)', Collection."Item Type"));
      OutputFile.WRITE('        {');
      OutputFile.WRITE('            return innerList.FindLastIndex(startIndex, match);');
      OutputFile.WRITE('        }');

      OutputFile.WRITE('');
      OutputFile.WRITE(
        STRSUBSTNO('        public int FindLastIndex(int startIndex, int count, Predicate<%1> match)', Collection."Item Type"));
      OutputFile.WRITE('        {');
      OutputFile.WRITE('            return innerList.FindLastIndex(startIndex, count, match);');
      OutputFile.WRITE('        }');
      OutputFile.WRITE('');
    END;

    PROCEDURE WriteCollectionAddMethods@1000000012(Collection@1000000000 : Record 50007;IndexingAttribute@1000000004 : Text[80];VAR OutputFile@1000000001 : File);
    VAR
      Item@1000000002 : Record 50005;
      DerivedItem@1000000003 : Record 50005;
    BEGIN
      Collection.TESTFIELD("Item Type");
      Item.GET(Collection."Object Model Code", Collection."Item Type");

      CASE Item.Abstract OF
        FALSE:
          BEGIN
            WriteCollectionAddMethod(Item, FALSE, IndexingAttribute, FALSE, OutputFile);
            WriteCollectionAddMethod(Item, FALSE, IndexingAttribute, TRUE, OutputFile);
          END;
        TRUE:
          BEGIN
            DerivedItem.SETCURRENTKEY("Object Model Code", "Base Type");
            DerivedItem.SETRANGE("Object Model Code", Item."Object Model Code");
            DerivedItem.SETRANGE("Base Type", Item.Name);

            DerivedItem.FINDSET;
            REPEAT
              WriteCollectionAddMethod(DerivedItem, TRUE, IndexingAttribute, FALSE, OutputFile);
              WriteCollectionAddMethod(DerivedItem, TRUE, IndexingAttribute, TRUE, OutputFile);
            UNTIL DerivedItem.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE WriteCollectionAddMethod@1000000021(Item@1000000000 : Record 50005;MethodNameIncludesItemType@1000000002 : Boolean;IndexingAttribute@1000000004 : Text[80];FormatAndArgs@1100476000 : Boolean;VAR OutputFile@1000000001 : File);
    VAR
      Attribute@1100476001 : Record 50009;
      Separator@1000000003 : Text[2];
    BEGIN
      IF FormatAndArgs THEN BEGIN
        Attribute.SETCURRENTKEY("Object Model Code", "Container Type", "Container Name", "Sort Order");
        Attribute.SETRANGE("Object Model Code", Item."Object Model Code");
        Attribute.SETRANGE("Container Type", Attribute."Container Type"::Item);
        Attribute.SETRANGE("Container Name", Item.Name);
        Attribute.SETRANGE(Initialization, Attribute.Initialization::"Constructor Parameter");
        Attribute.SETRANGE(Type, Attribute.Type::"Imported Type");
        Attribute.SETFILTER("Type Name", '@string');
        Attribute.SETRANGE("Format/Args Ctor Params", TRUE);

        IF Attribute.ISEMPTY THEN
          EXIT;
      END;

      OutputFile.WRITE(STRSUBSTNO('        %1', GetAddMethodDeclaration(Item, MethodNameIncludesItemType, FormatAndArgs)));
      OutputFile.WRITE('        {');

      OutputFile.WRITE(
        STRSUBSTNO(
          '            %1 item = new %1(%2);',
          Item.Name,
          GetItemConstructorParameters(Item, FALSE, FormatAndArgs, Separator)));

      CASE IndexingAttribute = '' OF
        TRUE: OutputFile.WRITE('            innerList.Add(item);');
        FALSE: OutputFile.WRITE(STRSUBSTNO('            innerList.Add(%1, item);', IndexingAttribute));
      END;

      OutputFile.WRITE('            return item;');
      OutputFile.WRITE('        }');
      OutputFile.WRITE('');
    END;

    PROCEDURE WriteCollectionAddRangeMethod@1100476002(Collection@1100476000 : Record 50007;VAR OutputFile@1100476001 : File);
    VAR
      Item@1100476002 : Record 50005;
      Attribute@1100476003 : Record 50009;
    BEGIN
      IF Collection."Generate AddRange Method" THEN BEGIN
        Item.GET(Collection."Object Model Code", Collection."Item Type");
        Item.TESTFIELD(Abstract, FALSE);

        // must have exactly one ctor parameter
        Attribute.SETCURRENTKEY("Object Model Code", "Container Type", "Container Name", "Sort Order");
        Attribute.SETRANGE("Object Model Code", Item."Object Model Code");
        Attribute.SETRANGE("Container Type", Attribute."Container Type"::Item);
        Attribute.SETRANGE("Container Name", Item.Name);
        Attribute.SETRANGE(Initialization, Attribute.Initialization::"Constructor Parameter");
        Attribute.FINDFIRST; // not found? crash & burn
        IF Attribute.NEXT <> 0 THEN
          ERROR(Text000);

        OutputFile.WRITE(STRSUBSTNO('        public void AddRange(params %1[] %2s)', Attribute."Type Name", Attribute."Field Name"));
        OutputFile.WRITE('        {');
        OutputFile.WRITE(STRSUBSTNO('            foreach(var item in %1s)', Attribute."Field Name"));
        OutputFile.WRITE('            {');
        OutputFile.WRITE(STRSUBSTNO('               innerList.Add(new %1(item));', Item.Name));
        OutputFile.WRITE('             }');
        OutputFile.WRITE('        }');
        OutputFile.WRITE('');
      END;
    END;

    PROCEDURE GetAddMethodDeclaration@1000000040(Item@1000000001 : Record 50005;MethodNameIncludesItemType@1000000000 : Boolean;FormatAndArgs@1100476000 : Boolean) Result : Text[250];
    BEGIN
      Result := 'public ';
      Result += Item.Name;
      Result += ' Add';

      IF MethodNameIncludesItemType THEN
        Result += Item.Name;

      Result += '(';
      Result += GetAddMethodParameters(Item, FormatAndArgs);
      Result += ')';
    END;

    PROCEDURE GetAltAddMethodDeclaration@1100476006(Item@1100476001 : Record 50005;MethodNameIncludesItemType@1100476000 : Boolean) : Text[250];
    BEGIN
    END;

    PROCEDURE GetAddMethodParameters@1000000036(Item@1000000000 : Record 50005;FormatAndArgs@1100476000 : Boolean) Result : Text[250];
    VAR
      Separator@1000000001 : Text[2];
    BEGIN
      EXIT(GetItemConstructorParameters(Item, TRUE, FormatAndArgs, Separator));
    END;

    LOCAL PROCEDURE WriteCollectionInsertMethod@1000000035(Collection@1000000001 : Record 50007;VAR OutputFile@1000000000 : File);
    VAR
      Item@1000000002 : Record 50005;
      Separator@1000000003 : Text[2];
    BEGIN
      IF NOT Collection."Generate Insert Method" THEN
        EXIT;

      Collection.TESTFIELD("Collection Style", Collection."Collection Style"::List);
      Collection.TESTFIELD("Item Type");

      Item.GET(Collection."Object Model Code", Collection."Item Type");
      Item.TESTFIELD(Abstract, FALSE);

      OutputFile.WRITE(STRSUBSTNO('        %1', GetInsertMethodDeclaration(Item)));
      OutputFile.WRITE('        {');
      OutputFile.WRITE(
        STRSUBSTNO('            %1 item = new %1(%2);', Item.Name, GetItemConstructorParameters(Item, FALSE, FALSE, Separator)));
      OutputFile.WRITE('            innerList.Insert(index, item);');
      OutputFile.WRITE('            return item;');
      OutputFile.WRITE('        }');
      OutputFile.WRITE('');
    END;

    PROCEDURE GetInsertMethodDeclaration@1000000046(Item@1000000000 : Record 50005) Result : Text[250];
    VAR
      Parameters@1100476000 : Text[250];
    BEGIN
      Result := 'public ';
      Result += Item.Name;
      Result += ' Insert';
      Result += '(int index';

      // TableKeys collection has no Add method parameters,
      // but you still need to be able to insert a key,
      // e.g. to be able to insert a new primary key.
      // (The Add method would only append new keys)

      Parameters := GetAddMethodParameters(Item, FALSE);
      IF Parameters <> '' THEN BEGIN
        Result += ', ';
        Result += Parameters;
      END;

      Result += ')';
    END;

    PROCEDURE WriteCollectionRemoveMethod@1100476000(Collection@1100476003 : Record 50007;IndexingAttributeTypeName@1100476001 : Text[80];IndexingAttributeName@1100476002 : Text[80];VAR OutputFile@1100476000 : File);
    BEGIN
      IF NOT Collection."Generate Remove Method" THEN
        EXIT;

      OutputFile.WRITE(STRSUBSTNO('        %1', GetRemoveMethodDeclaration(Collection,IndexingAttributeTypeName, IndexingAttributeName)));
      OutputFile.WRITE('        {');

      CASE Collection."Collection Style" OF
        Collection."Collection Style"::List:
          OutputFile.WRITE('            innerList.RemoveAt(index);');
        Collection."Collection Style"::Dictionary:
          OutputFile.WRITE(STRSUBSTNO('            return innerList.Remove(%1);', IndexingAttributeName));
      END;

      OutputFile.WRITE('        }');
    END;

    PROCEDURE GetRemoveMethodDeclaration@1100476004(Collection@1100476002 : Record 50007;IndexingAttributeTypeName@1100476000 : Text[80];IndexingAttributeName@1100476001 : Text[80]) Result : Text[250];
    BEGIN
      CASE Collection."Collection Style" OF
        Collection."Collection Style"::List:
          Result += 'public void RemoveAt(int index)';
        Collection."Collection Style"::Dictionary:
          Result += STRSUBSTNO('public bool Remove(%1 %2)', IndexingAttributeTypeName, IndexingAttributeName);
      END;
    END;

    PROCEDURE WriteEndNamespace@1000000008(ObjectModel@1000000001 : Record 50000;VAR OutputFile@1000000000 : File);
    BEGIN
      OutputFile.WRITE('}');
    END;

    PROCEDURE IIF@1000000004(Condition@1000000000 : Boolean;ValueIfTrue@1000000001 : Text[1024];ValueIfFalse@1000000002 : Text[1024]) : Text[1024];
    BEGIN
      IF Condition THEN
        EXIT(ValueIfTrue);
      EXIT(ValueIfFalse);
    END;

    PROCEDURE ENDSWITH@1000000003(Text@1000000000 : Text[1024];EndsWith@1000000001 : Text[1024]) : Boolean;
    VAR
      Actual@1000000002 : Text[1024];
    BEGIN
      IF STRLEN(EndsWith) > STRLEN(Text) THEN
        EXIT(FALSE);

      Actual := COPYSTR(Text, STRLEN(Text) - STRLEN(EndsWith) + 1);

      EXIT(Actual = EndsWith);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50002 Export Assembly Info
{
  OBJECT-PROPERTIES
  {
    Date=08-02-13;
    Time=18:43:48;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            ExportAssemblyInfo('CORE');
          END;

  }
  CODE
  {

    PROCEDURE ExportAssemblyInfo@1000000000(ObjectModelCode@1000000000 : Code[10]);
    VAR
      ObjectModel@1000000001 : Record 50000;
      OutputFile@1000000002 : File;
    BEGIN
      ObjectModel.GET(ObjectModelCode);
      ObjectModel.TESTFIELD("Assembly Info File Name");

      OutputFile.TEXTMODE := TRUE;
      OutputFile.WRITEMODE := TRUE;
      OutputFile.QUERYREPLACE := FALSE;
      OutputFile.CREATE(ObjectModel."Assembly Info File Name");

      OutputFile.WRITE('using System;');
      OutputFile.WRITE('using System.Reflection;');
      OutputFile.WRITE('');
      OutputFile.WRITE(STRSUBSTNO('[assembly: AssemblyTitle("%1")]', ObjectModel."Assembly Title"));
      OutputFile.WRITE(STRSUBSTNO('[assembly: AssemblyDescription("%1")]', ObjectModel."Assembly Description"));
      OutputFile.WRITE(STRSUBSTNO('[assembly: AssemblyCompany("%1")]', ObjectModel."Assembly Company"));
      OutputFile.WRITE(STRSUBSTNO('[assembly: AssemblyProduct("%1")]', ObjectModel."Assembly Product Name"));
      OutputFile.WRITE(STRSUBSTNO('[assembly: AssemblyCopyright("%1")]', ObjectModel."Assembly Copyright"));

      OutputFile.WRITE(
        STRSUBSTNO(
          '[assembly: AssemblyVersion("%1.%2.%3.%4")]',
          ObjectModel."Major Version No.",
          ObjectModel."Minor Version No.",
          ObjectModel."Build No.",
          ObjectModel."Revision No."));

      OutputFile.WRITE(
        STRSUBSTNO(
          '[assembly: AssemblyFileVersion("%1.%2.%3.%4")]',
          ObjectModel."Major Version No.",
          ObjectModel."Minor Version No.",
          ObjectModel."Build No.",
          ObjectModel."Revision No."));

      OutputFile.CLOSE;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50003 Compile Object Model
{
  OBJECT-PROPERTIES
  {
    Date=28-01-14;
    Time=19:07:41;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CompileObjectModel('CORE');
          END;

  }
  CODE
  {

    PROCEDURE CompileObjectModel@1000000000(ObjectModelCode@1000000000 : Code[10]);
    VAR
      ObjectModel@1000000003 : Record 50000;
    BEGIN
      EXIT; // FIXME

      ObjectModel.GET(ObjectModelCode);
      ObjectModel.TESTFIELD("Object Model Source File Name");
      ObjectModel.TESTFIELD("Obj. Model Partials File Name");
      ObjectModel.TESTFIELD("Assembly File Name");

      ShellRun(
        STRSUBSTNO(
          '"C:\Users\jhoek\Dropbox\Work in Progress\UncommonSense.CBreeze.Generator\UncommonSense.CBreeze.Core.cmd" "%1" "%2" "%3" "%4"',
          ObjectModel."Object Model Source File Name",
          ObjectModel."Assembly Info File Name",
          ObjectModel."Assembly File Name",
          ObjectModel."Obj. Model Partials File Name"),
        1,
        TRUE);
    END;

    PROCEDURE ShellRun@1000000001(Command@1000000001 : Text[1024];WindowStyle@1000000002 : Integer;WaitOnReturn@1000000003 : Boolean);
    VAR
      WindowsShell@1000000000 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
    BEGIN
      CREATE(WindowsShell);
      WindowsShell.Run(Command, WindowStyle, WaitOnReturn);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50004 Export Object Model Descriptn.
{
  OBJECT-PROPERTIES
  {
    Date=22-08-13;
    Time=23:50:26;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            ExportObjectModelDescription('CORE');
          END;

  }
  CODE
  {

    PROCEDURE ExportObjectModelDescription@1000000000(ObjectModelCode@1000000000 : Code[10]);
    VAR
      ObjectModel@1000000001 : Record 50000;
      DOMDocument@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
    BEGIN
      ObjectModel.GET(ObjectModelCode);
      ObjectModel.TESTFIELD("Description File Name");

      CREATE(DOMDocument);
      ExportObjectModel(ObjectModel, DOMDocument);
      DOMDocument.save(ObjectModel."Description File Name");
    END;

    LOCAL PROCEDURE ExportObjectModel@1000000004(ObjectModel@1000000004 : Record 50000;DOMDocument@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60");
    VAR
      ImportedType@1000000000 : Record 50001;
      Enumeration@1000000001 : Record 50002;
      Item@1000000005 : Record 50005;
      Collection@1000000006 : Record 50007;
      PropertyType@1000000007 : Record 50014;
      PropertyCollection@1000000008 : Record 50015;
      ObjectModelElement@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      AppendElement(DOMDocument, DOMDocument, 'objectModel', ObjectModelElement);
      ObjectModelElement.setAttribute('code', ObjectModel.Code);
      ObjectModelElement.setAttribute('namespace', ObjectModel."Object Model Namespace");
      ObjectModelElement.setAttribute('sourceFileName', ObjectModel."Object Model Source File Name");
      ObjectModelElement.setAttribute('assemblyInfoFileName', ObjectModel."Assembly Info File Name");
      ObjectModelElement.setAttribute('assemblyFileName', ObjectModel."Assembly File Name");
      ObjectModelElement.setAttribute('assemblyTitle', ObjectModel."Assembly Title");
      ObjectModelElement.setAttribute('assemblyDescription', ObjectModel."Assembly Description");
      ObjectModelElement.setAttribute('assemblyCompany', ObjectModel."Assembly Company");
      ObjectModelElement.setAttribute('assemblyProductName', ObjectModel."Assembly Product Name");
      ObjectModelElement.setAttribute('assemblyCopyright', ObjectModel."Assembly Copyright");
      ObjectModelElement.setAttribute('majorVersionNo', ObjectModel."Major Version No.");
      ObjectModelElement.setAttribute('minorVersionNo', ObjectModel."Minor Version No.");
      ObjectModelElement.setAttribute('buildNo', ObjectModel."Build No.");
      ObjectModelElement.setAttribute('revisionNo', ObjectModel."Revision No.");
      ObjectModelElement.setAttribute('descriptionFileName', ObjectModel."Description File Name");

      ImportedType.SETRANGE("Object Model Code", ObjectModel.Code);
      ExportImportedTypes(ImportedType, ObjectModelElement);

      Enumeration.SETRANGE("Object Model Code", ObjectModel.Code);
      ExportEnumerations(Enumeration, ObjectModelElement);

      Item.SETRANGE("Object Model Code", ObjectModel.Code);
      ExportItems(Item, ObjectModelElement);

      Collection.SETRANGE("Object Model Code", ObjectModel.Code);
      ExportCollections(Collection, ObjectModelElement);

      PropertyType.SETRANGE("Object Model Code", ObjectModel.Code);
      ExportPropertyTypes(PropertyType, ObjectModelElement);

      PropertyCollection.SETRANGE("Object Model Code", ObjectModel.Code);
      ExportPropertyCollections(PropertyCollection, ObjectModelElement);
    END;

    LOCAL PROCEDURE ExportImportedTypes@1000000005(VAR ImportedType@1000000001 : Record 50001;ObjectModelElement@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      ImportedTypesElement@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      AppendElement(ObjectModelElement.ownerDocument, ObjectModelElement, 'importedTypes', ImportedTypesElement);

      IF ImportedType.FINDSET THEN
        REPEAT
          ExportImportedType(ImportedType, ImportedTypesElement);
        UNTIL ImportedType.NEXT = 0;

      // done
    END;

    LOCAL PROCEDURE ExportImportedType@1000000006(ImportedType@1000000001 : Record 50001;ImportedTypesElement@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      ImportedTypeElement@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      AppendElement(ImportedTypesElement.ownerDocument, ImportedTypesElement, 'importedType', ImportedTypeElement);
      ImportedTypeElement.setAttribute('name', ImportedType.Name);
      ImportedTypeElement.setAttribute('namespace', ImportedType.Namespace);

      // done
    END;

    LOCAL PROCEDURE ExportEnumerations@1000000007(VAR Enumeration@1000000000 : Record 50002;ObjectModelElement@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      EnumerationsElement@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      AppendElement(ObjectModelElement.ownerDocument, ObjectModelElement, 'enumerations', EnumerationsElement);

      IF Enumeration.FINDSET THEN
        REPEAT
          ExportEnumeration(Enumeration, EnumerationsElement);
        UNTIL Enumeration.NEXT = 0;

      // done
    END;

    LOCAL PROCEDURE ExportEnumeration@1000000008(Enumeration@1000000000 : Record 50002;EnumerationsElement@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      EnumerationValue@1000000003 : Record 50003;
      EnumerationElement@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      AppendElement(EnumerationsElement.ownerDocument, EnumerationsElement, 'enumeration', EnumerationElement);
      EnumerationElement.setAttribute('name', Enumeration.Name);
      EnumerationElement.setAttribute('url', Enumeration.URL);

      EnumerationValue.SETRANGE("Object Model Code", Enumeration."Object Model Code");
      EnumerationValue.SETRANGE("Enumeration Name", Enumeration.Name);
      ExportEnumerationValues(EnumerationValue, EnumerationElement);

      // done
    END;

    LOCAL PROCEDURE ExportEnumerationValues@1000000002(VAR EnumerationValue@1000000000 : Record 50003;EnumerationElement@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    BEGIN
      IF EnumerationValue.FINDSET THEN
        REPEAT
          ExportEnumerationValue(EnumerationValue, EnumerationElement);
        UNTIL EnumerationValue.NEXT = 0;

      // done
    END;

    LOCAL PROCEDURE ExportEnumerationValue@1000000001(EnumerationValue@1000000001 : Record 50003;EnumerationElement@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      ValueElement@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      AppendElement(EnumerationElement.ownerDocument, EnumerationElement, 'value', ValueElement);
      ValueElement.setAttribute('no', EnumerationValue."No.");
      ValueElement.setAttribute('value', EnumerationValue.Value);

      // done
    END;

    LOCAL PROCEDURE ExportItems@1000000012(VAR Item@1000000000 : Record 50005;ObjectModelElement@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      ItemsElement@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      AppendElement(ObjectModelElement.ownerDocument, ObjectModelElement, 'items', ItemsElement);

      IF Item.FINDSET THEN
        REPEAT
          ExportItem(Item, ItemsElement);
        UNTIL Item.NEXT = 0;

      // done
    END;

    LOCAL PROCEDURE ExportItem@1000000013(Item@1000000000 : Record 50005;ItemsElement@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      Attribute@1000000003 : Record 50009;
      ItemElement@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      AppendElement(ItemsElement.ownerDocument, ItemsElement, 'item', ItemElement);
      ItemElement.setAttribute('name', Item.Name);
      ItemElement.setAttribute('baseType', Item."Base Type");
      ItemElement.setAttribute('creatable', FORMAT(Item.Creatable, 0, 9));
      ItemElement.setAttribute('abstract', FORMAT(Item.Abstract, 0, 9));

      Attribute.SETRANGE("Object Model Code", Item."Object Model Code");
      Attribute.SETRANGE("Container Type", Attribute."Container Type"::Item);
      Attribute.SETRANGE("Container Name", Item.Name);

      ExportAttributes(Attribute, ItemElement);
    END;

    LOCAL PROCEDURE ExportCollections@1000000015(VAR Collection@1000000000 : Record 50007;ObjectModelElement@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      CollectionsElement@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      AppendElement(ObjectModelElement.ownerDocument, ObjectModelElement, 'collections', CollectionsElement);

      IF Collection.FINDSET THEN
        REPEAT
          ExportCollection(Collection, CollectionsElement);
        UNTIL Collection.NEXT = 0;

      // done
    END;

    LOCAL PROCEDURE ExportCollection@1000000016(Collection@1000000000 : Record 50007;CollectionsElement@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      CollectionElement@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      AppendElement(CollectionsElement.ownerDocument, CollectionsElement, 'collection', CollectionElement);
      CollectionElement.setAttribute('name', Collection.Name);
      CollectionElement.setAttribute('itemType', Collection."Item Type");
      CollectionElement.setAttribute('generateInsertMethod', FORMAT(Collection."Generate Insert Method", 0, 9));
      CollectionElement.setAttribute('generateRemoveMethod', FORMAT(Collection."Generate Remove Method", 0, 9));
      CollectionElement.setAttribute('collectionstyle', FORMAT(Collection."Collection Style"));
    END;

    LOCAL PROCEDURE ExportPropertyTypes@1000000003(VAR PropertyType@1000000001 : Record 50014;ObjectModelElement@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      PropertyTypesElement@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      AppendElement(ObjectModelElement.ownerDocument, ObjectModelElement, 'propertyTypes', PropertyTypesElement);

      IF PropertyType.FINDSET THEN
        REPEAT
          ExportPropertyType(PropertyType, PropertyTypesElement);
        UNTIL PropertyType.NEXT = 0;
    END;

    LOCAL PROCEDURE ExportPropertyType@1000000010(PropertyType@1000000001 : Record 50014;PropertyTypesElement@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      PropertyTypeElement@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      AppendElement(PropertyTypesElement.ownerDocument, PropertyTypesElement, 'propertyType', PropertyTypeElement);
      PropertyTypeElement.setAttribute('name', PropertyType.Name);
      PropertyTypeElement.setAttribute('encapsulatedType', FORMAT(PropertyType."Encapsulated Type"));
      PropertyTypeElement.setAttribute('encapsulatedName', PropertyType."Encapsulated Name");
      PropertyTypeElement.setAttribute('hasSetter', FORMAT(PropertyType."Has Setter"));
      PropertyTypeElement.setAttribute('hasValueExpression', PropertyType."HasValue Expression");
      PropertyTypeElement.setAttribute('initialValueExpression', PropertyType."Initial Value Expression");
    END;

    LOCAL PROCEDURE ExportPropertyCollections@1000000017(VAR PropertyCollection@1000000001 : Record 50015;ObjectModelElement@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      PropertyCollectionsElement@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      AppendElement(ObjectModelElement.ownerDocument, ObjectModelElement, 'propertyCollections', PropertyCollectionsElement);

      IF PropertyCollection.FINDSET THEN
        REPEAT
          ExportPropertyCollection(PropertyCollection, PropertyCollectionsElement);
        UNTIL PropertyCollection.NEXT = 0;
    END;

    LOCAL PROCEDURE ExportPropertyCollection@1000000018(PropertyCollection@1000000001 : Record 50015;PropertyCollectionsElement@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      PropertyCollectionMember@1000000003 : Record 50016;
      PropertyCollectionElement@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      AppendElement(
        PropertyCollectionsElement.ownerDocument,
        PropertyCollectionsElement,
        'propertyCollection',
        PropertyCollectionElement);
      PropertyCollectionElement.setAttribute('name', PropertyCollection.Name);

      PropertyCollectionMember.SETRANGE("Object Model Code", PropertyCollection."Object Model Code");
      PropertyCollectionMember.SETRANGE("Property Collection Name", PropertyCollection.Name);

      ExportPropertyCollectnMembers(PropertyCollectionMember, PropertyCollectionElement);
    END;

    LOCAL PROCEDURE ExportAttributes@1000000011(VAR Attribute@1000000000 : Record 50009;ItemElement@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    BEGIN
      IF Attribute.FINDSET THEN
        REPEAT
          ExportAttribute(Attribute, ItemElement);
        UNTIL Attribute.NEXT = 0;
    END;

    LOCAL PROCEDURE ExportAttribute@1000000014(Attribute@1000000000 : Record 50009;ItemElement@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      AttributeElement@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      AppendElement(ItemElement.ownerDocument, ItemElement, 'attribute', AttributeElement);
      AttributeElement.setAttribute('name', Attribute.Name);
      AttributeElement.setAttribute('type', FORMAT(Attribute.Type));
      AttributeElement.setAttribute('typeName', Attribute."Type Name");
      AttributeElement.setAttribute('sortOrder', Attribute."Sort Order");
      AttributeElement.setAttribute('fieldName', Attribute."Field Name");
      AttributeElement.setAttribute('initialization', FORMAT(Attribute.Initialization));
      AttributeElement.setAttribute('fieldDeclarationInitValue', Attribute."Field Declaration Init Value");
      AttributeElement.setAttribute('hasSetter', FORMAT(Attribute."Has Setter", 0, 9));
      AttributeElement.setAttribute('abstract', FORMAT(Attribute.Abstract, 0, 9));
      AttributeElement.setAttribute('override', FORMAT(Attribute.Override, 0, 9));
      AttributeElement.setAttribute('nullable', FORMAT(Attribute.Nullable, 0, 9));
      AttributeElement.setAttribute('url', Attribute.URL);
    END;

    PROCEDURE ExportPropertyCollectnMembers@1000000026(VAR PropertyCollectionMember@1000000000 : Record 50016;PropertyCollectionElement@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    BEGIN
      IF PropertyCollectionMember.FINDSET THEN
        REPEAT
          ExportPropertyCollectionMember(PropertyCollectionMember, PropertyCollectionElement);
        UNTIL PropertyCollectionMember.NEXT = 0;
    END;

    PROCEDURE ExportPropertyCollectionMember@1000000027(PropertyCollectionMember@1000000001 : Record 50016;PropertyCollectionElement@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      PropertyCollectnMemberElement@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      AppendElement(
        PropertyCollectionElement.ownerDocument,
        PropertyCollectionElement,
        'member',
        PropertyCollectnMemberElement);

      PropertyCollectnMemberElement.setAttribute('name', PropertyCollectionMember.Name);
      PropertyCollectnMemberElement.setAttribute('propertyType', PropertyCollectionMember."Property Type");
      PropertyCollectnMemberElement.setAttribute('fieldName', PropertyCollectionMember."Field Name");
      PropertyCollectnMemberElement.setAttribute('sortOrder', FORMAT(PropertyCollectionMember."Sort Order"));
    END;

    LOCAL PROCEDURE AppendElement@1000000009(DOMDocument@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";ParentNode@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";Name@1000000002 : Text[80];VAR NewElement@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    BEGIN
      NewElement := DOMDocument.createElement(Name);
      ParentNode.appendChild(NewElement);

      // done
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50005 Export Generator Objects
{
  OBJECT-PROPERTIES
  {
    Date=27-05-15;
    Time=21:14:39;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=VAR
            Object@1100476000 : Record 2000000001;
          BEGIN
            Object.SETFILTER(Type, '>%1', Object.Type::TableData);
            Object.SETFILTER(ID, '..%1', 50099);

            EXPORTOBJECTS(FileName, Object, 0);
          END;

  }
  CODE
  {

    LOCAL PROCEDURE FileName@1100476000() : Text[250];
    BEGIN
      EXIT('C:\Users\jhoek\GitHub\UncommonSense.CBreeze\CBreeze\UncommonSense.CBreeze.Generator\cbreezeapp.txt');
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50006 Export Partials
{
  OBJECT-PROPERTIES
  {
    Date=07-12-13;
    Time=13:25:19;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            ExportPartials('CORE');
          END;

  }
  CODE
  {

    PROCEDURE ExportPartials@1000000000(ObjectModelCode@1000000000 : Code[10]);
    VAR
      ObjectModel@1000000001 : Record 50000;
      OutputFile@1000000002 : File;
    BEGIN
      ObjectModel.GET(ObjectModelCode);
      ObjectModel.TESTFIELD("Obj. Model Partials File Name");

      OutputFile.TEXTMODE := TRUE;
      OutputFile.WRITEMODE := TRUE;
      OutputFile.QUERYREPLACE := FALSE;
      OutputFile.CREATE(ObjectModel."Obj. Model Partials File Name");

      WriteUsings(ObjectModel, OutputFile);
      WriteStartNamespace(ObjectModel, OutputFile);
      WriteTableFieldGetPropByName(ObjectModel, OutputFile);
      WriteEndNamespace(ObjectModel, OutputFile);

      OutputFile.CLOSE;
    END;

    PROCEDURE WriteUsings@1000000004(ObjectModel@1000000000 : Record 50000;VAR OutputFile@1000000001 : File);
    BEGIN
      OutputFile.WRITE('using System;');
      OutputFile.WRITE('using System.Linq;');
      OutputFile.WRITE('');
    END;

    PROCEDURE WriteStartNamespace@1000000005(ObjectModel@1000000000 : Record 50000;VAR OutputFile@1000000001 : File);
    BEGIN
      ObjectModel.TESTFIELD("Object Model Namespace");

      OutputFile.WRITE(STRSUBSTNO('namespace %1', ObjectModel."Object Model Namespace"));
      OutputFile.WRITE('{');
    END;

    PROCEDURE WriteTableFieldGetPropByName@1000000001(ObjectModel@1000000000 : Record 50000;VAR OutputFile@1000000001 : File);
    VAR
      Item@1000000002 : Record 50005;
    BEGIN
      OutputFile.WRITE('    public abstract partial class TableField');
      OutputFile.WRITE('    {');
      OutputFile.WRITE('        public abstract Property GetPropertyByName(string name);');
      OutputFile.WRITE('    }');

      Item.SETCURRENTKEY("Object Model Code", "Base Type");
      Item.SETRANGE("Object Model Code", ObjectModel.Code);
      Item.SETRANGE("Base Type", 'TableField');

      IF Item.FINDSET THEN
        REPEAT
          OutputFile.WRITE('');
          OutputFile.WRITE(STRSUBSTNO('    public partial class %1', Item.Name));
          OutputFile.WRITE('    {');
          OutputFile.WRITE('        public override Property GetPropertyByName(string name)');
          OutputFile.WRITE('        {');
          OutputFile.WRITE('            return this.Properties.FirstOrDefault(p => p.Name == name);');
          OutputFile.WRITE('        }');
          OutputFile.WRITE('    }');
        UNTIL Item.NEXT = 0;
    END;

    PROCEDURE WriteEndNamespace@1000000006(ObjectModel@1000000000 : Record 50000;VAR OutputFile@1000000001 : File);
    BEGIN
      OutputFile.WRITE('}');
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50007 Update Differentiator Enums
{
  OBJECT-PROPERTIES
  {
    Date=07-07-15;
    Time=16:36:15;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            UpdateDifferentiatorEnums('CORE');
          END;

  }
  CODE
  {

    PROCEDURE UpdateDifferentiatorEnums@1000000000(ObjectModelCode@1000000000 : Code[10]);
    VAR
      Item@1000000001 : Record 50005;
      Item2@1000000002 : Record 50005;
    BEGIN
      DeleteOldGeneratedEnums(ObjectModelCode);

      IF Item.FINDSET THEN
        REPEAT
          Item.CALCFIELDS("No. of Derived Types");

          CASE TRUE OF
            Item."No. of Derived Types" > 0:
              Item."Differentiator Enum Name" :=
                InsertGeneratedEnum(ObjectModelCode, STRSUBSTNO('%1Type', Item.Name));
            Item."Base Type" <> '':
              Item."Differentiator Enum Name" :=
                InsertGeneratedEnumValue(ObjectModelCode, STRSUBSTNO('%1Type', Item."Base Type"), Item.Name);
          ELSE
            Item."Differentiator Enum Name" := '';
          END;

          Item2 := Item;
          Item2.MODIFY;
        UNTIL Item.NEXT = 0;
    END;

    LOCAL PROCEDURE DeleteOldGeneratedEnums@1000000001(ObjectModelCode@1000000000 : Code[10]);
    VAR
      Enumeration@1000000001 : Record 50002;
    BEGIN
      Enumeration.SETRANGE("Object Model Code", ObjectModelCode);
      Enumeration.SETRANGE(Generated, TRUE);
      Enumeration.DELETEALL(TRUE);
    END;

    PROCEDURE InsertGeneratedEnum@1000000002(ObjectModelCode@1000000000 : Code[10];Name@1000000001 : Text[50]) : Text[50];
    VAR
      Enumeration@1000000002 : Record 50002;
    BEGIN
      Enumeration.VALIDATE("Object Model Code", ObjectModelCode);
      Enumeration.VALIDATE(Name, Name);
      Enumeration.VALIDATE(Generated, TRUE);
      Enumeration.INSERT(TRUE);

      EXIT(Name);
    END;

    PROCEDURE InsertGeneratedEnumValue@1000000003(ObjectModelCode@1000000001 : Code[10];EnumerationName@1000000002 : Text[50];Value@1000000003 : Text[50]) : Text[50];
    VAR
      EnumerationValue@1000000000 : Record 50003;
    BEGIN
      EnumerationValue.SETRANGE("Object Model Code", ObjectModelCode);
      EnumerationValue.SETRANGE("Enumeration Name", EnumerationName);
      IF NOT EnumerationValue.FINDLAST THEN;

      EnumerationValue.VALIDATE("Object Model Code", ObjectModelCode);
      EnumerationValue.VALIDATE("Enumeration Name", EnumerationName);
      EnumerationValue.VALIDATE("No.", EnumerationValue."No." + 1);
      EnumerationValue.VALIDATE(Value, Value);
      EnumerationValue.INSERT(TRUE);

      EXIT(EnumerationName);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50014 Import Object Model Descriptn.
{
  OBJECT-PROPERTIES
  {
    Date=22-08-13;
    Time=23:51:06;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=VAR
            ObjectModelFile@1000000000 : File;
            Stream@1000000001 : InStream;
          BEGIN
            ImportObjectModelDescription(
              'C:\Users\jhoek\Dropbox\Work in Progress\UncommonSense.CBreeze.Core\uncommonsense.cbreeze.core.xml');
          END;

  }
  CODE
  {
    VAR
      Text000@1100476000 : TextConst 'ENU=Delete existing object model %1?';

    PROCEDURE ImportObjectModelDescription@1100476001(FileName@1100476001 : Text[250]);
    VAR
      DOMDocument@1100476002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
    BEGIN
      CREATE(DOMDocument);
      DOMDocument.load(FileName);

      ImportObjectModel(DOMDocument);
    END;

    PROCEDURE ImportObjectModel@1100476005(DOMDocument@1100476001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60");
    VAR
      ObjectModel@1100476002 : Record 50000;
      ObjectModelElement@1100476000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      ObjectModelCode@1100476003 : Code[10];
    BEGIN
      ObjectModelElement := DOMDocument.documentElement;

      EVALUATE(ObjectModelCode, FORMAT(ObjectModelElement.getAttribute('code')));

      IF ObjectModel.GET(ObjectModelCode) THEN
        IF CONFIRM(Text000, FALSE, ObjectModelCode) THEN
          ObjectModel.DELETE(TRUE);

      ObjectModel.Code := ObjectModelCode;
      EVALUATE(ObjectModel."Object Model Namespace", FORMAT(ObjectModelElement.getAttribute('namespace')));
      EVALUATE(ObjectModel."Object Model Source File Name", FORMAT(ObjectModelElement.getAttribute('sourceFileName')));
      EVALUATE(ObjectModel."Assembly Info File Name", FORMAT(ObjectModelElement.getAttribute('assemblyInfoFileName')));
      EVALUATE(ObjectModel."Assembly File Name", FORMAT(ObjectModelElement.getAttribute('assemblyFileName')));
      EVALUATE(ObjectModel."Assembly Title", FORMAT(ObjectModelElement.getAttribute('assemblyTitle')));
      EVALUATE(ObjectModel."Assembly Description", FORMAT(ObjectModelElement.getAttribute('assemblyDescription')));
      EVALUATE(ObjectModel."Assembly Company", FORMAT(ObjectModelElement.getAttribute('assemblyCompany')));
      EVALUATE(ObjectModel."Assembly Product Name", FORMAT(ObjectModelElement.getAttribute('assemblyProductName')));
      EVALUATE(ObjectModel."Assembly Copyright", FORMAT(ObjectModelElement.getAttribute('assemblyCopyright')));
      EVALUATE(ObjectModel."Major Version No.", FORMAT(ObjectModelElement.getAttribute('majorVersionNo')));
      EVALUATE(ObjectModel."Minor Version No.", FORMAT(ObjectModelElement.getAttribute('minorVersionNo')));
      EVALUATE(ObjectModel."Build No.", FORMAT(ObjectModelElement.getAttribute('buildNo')));
      EVALUATE(ObjectModel."Revision No.", FORMAT(ObjectModelElement.getAttribute('revisionNo')));
      EVALUATE(ObjectModel."Description File Name", FORMAT(ObjectModelElement.getAttribute('descriptionFileName')));
      ObjectModel.INSERT;

      ImportImportedTypes(ObjectModelCode, ObjectModelElement);
      ImportEnumerations(ObjectModelCode, ObjectModelElement);
      ImportItems(ObjectModelCode, ObjectModelElement);
      ImportCollections(ObjectModelCode, ObjectModelElement);
      ImportPropertyTypes(ObjectModelCode, ObjectModelElement);
      ImportPropertyCollections(ObjectModelCode, ObjectModelElement);
    END;

    PROCEDURE ImportImportedTypes@1100476000(ObjectModelCode@1100476004 : Code[10];ObjectModelElement@1100476001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      NodeList@1100476002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      i@1100476003 : Integer;
    BEGIN
      NodeList := ObjectModelElement.selectNodes('importedTypes/importedType');

      FOR i := 0 TO NodeList.length - 1 DO
        ImportImportedType(ObjectModelCode, NodeList.item(i));
    END;

    PROCEDURE ImportImportedType@1100476003(ObjectModelCode@1100476000 : Code[10];ImportedTypeElement@1100476001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      ImportedType@1100476002 : Record 50001;
    BEGIN
      ImportedType."Object Model Code" := ObjectModelCode;
      EVALUATE(ImportedType.Name, FORMAT(ImportedTypeElement.getAttribute('name')));
      EVALUATE(ImportedType.Namespace, FORMAT(ImportedTypeElement.getAttribute('namespace')));
      ImportedType.INSERT;
    END;

    PROCEDURE ImportEnumerations@1100476002(ObjectModelCode@1100476001 : Code[10];ObjectModelElement@1100476000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      NodeList@1100476003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      i@1100476002 : Integer;
    BEGIN
      NodeList := ObjectModelElement.selectNodes('enumerations/enumeration');

      FOR i := 0 TO NodeList.length - 1 DO
        ImportEnumeration(ObjectModelCode, NodeList.item(i));
    END;

    PROCEDURE ImportEnumeration@1100476004(ObjectModelCode@1100476001 : Code[10];EnumerationElement@1100476000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      Enumeration@1100476002 : Record 50002;
    BEGIN
      Enumeration."Object Model Code" := ObjectModelCode;
      EVALUATE(Enumeration.Name, FORMAT(EnumerationElement.getAttribute('name')));
      EVALUATE(Enumeration.URL, FORMAT(EnumerationElement.getAttribute('url')));
      Enumeration.INSERT;

      ImportEnumerationValues(ObjectModelCode, Enumeration.Name, EnumerationElement);
    END;

    PROCEDURE ImportEnumerationValues@1100476006(ObjectModelCode@1100476001 : Code[10];EnumerationName@1100476004 : Text[80];EnumerationElement@1100476000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      NodeList@1100476003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      i@1100476002 : Integer;
    BEGIN
      NodeList := EnumerationElement.selectNodes('value');

      FOR i := 0 TO NodeList.length - 1 DO
        ImportEnumerationValue(ObjectModelCode, EnumerationName, NodeList.item(i));
    END;

    PROCEDURE ImportEnumerationValue@1100476007(ObjectModelCode@1100476000 : Code[10];EnumerationName@1100476002 : Text[80];EnumerationValueElement@1100476003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      EnumerationValue@1100476001 : Record 50003;
    BEGIN
      EnumerationValue."Object Model Code" := ObjectModelCode;
      EnumerationValue."Enumeration Name" := EnumerationName;
      EVALUATE(EnumerationValue."No.", FORMAT(EnumerationValueElement.getAttribute('no')));
      EVALUATE(EnumerationValue.Value, FORMAT(EnumerationValueElement.getAttribute('value')));
      EnumerationValue.INSERT;
    END;

    PROCEDURE ImportItems@1100476008(ObjectModelCode@1100476001 : Code[10];ObjectModelElement@1100476000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      NodeList@1100476003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      i@1100476002 : Integer;
    BEGIN
      NodeList := ObjectModelElement.selectNodes('items/item');

      FOR i := 0 TO NodeList.length - 1 DO
        ImportItem(ObjectModelCode, NodeList.item(i));
    END;

    PROCEDURE ImportItem@1100476009(ObjectModelCode@1100476000 : Code[10];ItemElement@1100476001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      Item@1100476002 : Record 50005;
    BEGIN
      Item."Object Model Code" := ObjectModelCode;
      EVALUATE(Item.Name, FORMAT(ItemElement.getAttribute('name')));
      EVALUATE(Item."Base Type", FORMAT(ItemElement.getAttribute('baseType')));
      EVALUATE(Item.Creatable, FORMAT(ItemElement.getAttribute('creatable')));
      EVALUATE(Item.Abstract, FORMAT(ItemElement.getAttribute('abstract')));
      Item.UpdateNamePath;
      Item.INSERT;

      ImportAttributes(ObjectModelCode, Item.Name, ItemElement);
    END;

    PROCEDURE ImportAttributes@1100476010(ObjectModelCode@1100476000 : Code[10];ItemName@1100476001 : Text[50];ItemElement@1100476002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      NodeList@1100476004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      i@1100476003 : Integer;
    BEGIN
      NodeList := ItemElement.selectNodes('attribute');

      FOR i := 0 TO NodeList.length - 1 DO
        ImportAttribute(ObjectModelCode, ItemName, NodeList.item(i));
    END;

    PROCEDURE ImportAttribute@1100476011(ObjectModelCode@1100476002 : Code[10];ItemName@1100476001 : Text[50];AttributeElement@1100476000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      Attribute@1100476003 : Record 50009;
    BEGIN
      Attribute."Object Model Code" := ObjectModelCode;
      Attribute."Container Type" := Attribute."Container Type"::Item;
      Attribute."Container Name" := ItemName;
      EVALUATE(Attribute.Name, FORMAT(AttributeElement.getAttribute('name')));
      EVALUATE(Attribute.Type, FORMAT(AttributeElement.getAttribute('type')));
      EVALUATE(Attribute."Type Name", FORMAT(AttributeElement.getAttribute('typeName')));
      EVALUATE(Attribute."Sort Order", FORMAT(AttributeElement.getAttribute('sortOrder')));
      EVALUATE(Attribute."Field Name", FORMAT(AttributeElement.getAttribute('fieldName')));
      EVALUATE(Attribute.Initialization, FORMAT(AttributeElement.getAttribute('initialization')));
      EVALUATE(Attribute."Field Declaration Init Value", FORMAT(AttributeElement.getAttribute('fieldDeclarationInitValue')));
      EVALUATE(Attribute."Has Setter", FORMAT(AttributeElement.getAttribute('hasSetter')));
      EVALUATE(Attribute.Abstract, FORMAT(AttributeElement.getAttribute('abstract')));
      EVALUATE(Attribute.Override, FORMAT(AttributeElement.getAttribute('override')));
      EVALUATE(Attribute.Nullable, FORMAT(AttributeElement.getAttribute('nullable')));
      EVALUATE(Attribute.URL, FORMAT(AttributeElement.getAttribute('url')));
      Attribute.INSERT;
    END;

    PROCEDURE ImportCollections@1100476012(ObjectModelCode@1100476001 : Code[10];ObjectModelElement@1100476000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      NodeList@1100476003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      i@1100476002 : Integer;
    BEGIN
      NodeList := ObjectModelElement.selectNodes('collections/collection');

      FOR i := 0 TO NodeList.length - 1 DO
        ImportCollection(ObjectModelCode, NodeList.item(i));
    END;

    PROCEDURE ImportCollection@1100476013(ObjectModelCode@1100476001 : Code[10];CollectionElement@1100476000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      Collection@1100476002 : Record 50007;
    BEGIN
      Collection."Object Model Code" := ObjectModelCode;
      EVALUATE(Collection.Name, FORMAT(CollectionElement.getAttribute('name')));
      EVALUATE(Collection."Item Type", FORMAT(CollectionElement.getAttribute('itemType')));
      EVALUATE(Collection."Generate Insert Method", FORMAT(CollectionElement.getAttribute('generateInsertMethod')));
      EVALUATE(Collection."Generate Remove Method", FORMAT(CollectionElement.getAttribute('generateRemoveMethod')));
      EVALUATE(Collection."Collection Style", FORMAT(CollectionElement.getAttribute('collectionstyle')));
      Collection.INSERT;
    END;

    PROCEDURE ImportPropertyTypes@1100476014(ObjectModelCode@1100476001 : Code[10];ObjectModelElement@1100476000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      NodeList@1100476003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      i@1100476002 : Integer;
    BEGIN
      NodeList := ObjectModelElement.selectNodes('propertyTypes/propertyType');

      FOR i := 0 TO NodeList.length - 1 DO
        ImportPropertyType(ObjectModelCode, NodeList.item(i));
    END;

    PROCEDURE ImportPropertyType@1100476015(ObjectModelCode@1100476001 : Code[10];PropertyTypeElement@1100476000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      PropertyType@1100476002 : Record 50014;
    BEGIN
      PropertyType."Object Model Code" := ObjectModelCode;
      EVALUATE(PropertyType.Name, FORMAT(PropertyTypeElement.getAttribute('name')));
      EVALUATE(PropertyType."Encapsulated Type", FORMAT(PropertyTypeElement.getAttribute('encapsulatedType')));
      EVALUATE(PropertyType."Encapsulated Name", FORMAT(PropertyTypeElement.getAttribute('encapsulatedName')));
      EVALUATE(PropertyType."Has Setter", FORMAT(PropertyTypeElement.getAttribute('hasSetter')));
      EVALUATE(PropertyType."HasValue Expression", FORMAT(PropertyTypeElement.getAttribute('hasValueExpression')));
      EVALUATE(PropertyType."Initial Value Expression", FORMAT(PropertyTypeElement.getAttribute('initialValueExpression')));
      PropertyType.INSERT;
    END;

    PROCEDURE ImportPropertyCollections@1100476016(ObjectModelCode@1100476001 : Code[10];ObjectModelElement@1100476000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      NodeList@1100476003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      i@1100476002 : Integer;
    BEGIN
      NodeList := ObjectModelElement.selectNodes('propertyCollections/propertyCollection');

      FOR i := 0 TO NodeList.length - 1 DO
        ImportPropertyCollection(ObjectModelCode, NodeList.item(i));
    END;

    PROCEDURE ImportPropertyCollection@1100476017(ObjectModelCode@1100476001 : Code[10];PropertyCollectionElement@1100476000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      PropertyCollection@1100476002 : Record 50015;
    BEGIN
      PropertyCollection."Object Model Code" := ObjectModelCode;
      EVALUATE(PropertyCollection.Name, FORMAT(PropertyCollectionElement.getAttribute('name')));
      PropertyCollection.INSERT;

      ImportPropCollectionMembers(ObjectModelCode, PropertyCollection.Name, PropertyCollectionElement);
    END;

    PROCEDURE ImportPropCollectionMembers@1100476018(ObjectModelCode@1100476002 : Code[10];PropertyCollectionName@1100476001 : Text[50];PropertyCollectionElement@1100476000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      NodeList@1100476004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      i@1100476003 : Integer;
    BEGIN
      NodeList := PropertyCollectionElement.selectNodes('member');

      FOR i := 0 TO NodeList.length - 1 DO
        ImportPropCollectionMember(ObjectModelCode, PropertyCollectionName, NodeList.item(i));
    END;

    PROCEDURE ImportPropCollectionMember@1100476019(ObjectModelCode@1100476003 : Code[10];PropertyCollectionName@1100476002 : Text[50];PropCollectionMemberElement@1100476001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      PropertyCollectionMember@1100476000 : Record 50016;
    BEGIN
      PropertyCollectionMember."Object Model Code" := ObjectModelCode;
      PropertyCollectionMember."Property Collection Name" := PropertyCollectionName;
      EVALUATE(PropertyCollectionMember.Name, FORMAT(PropCollectionMemberElement.getAttribute('name')));
      EVALUATE(PropertyCollectionMember."Property Type", FORMAT(PropCollectionMemberElement.getAttribute('propertyType')));
      EVALUATE(PropertyCollectionMember."Field Name", FORMAT(PropCollectionMemberElement.getAttribute('fieldName')));
      EVALUATE(PropertyCollectionMember."Sort Order", FORMAT(PropCollectionMemberElement.getAttribute('sortOrder')));
      PropertyCollectionMember.INSERT;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50098 Migrate Table Field Triggers
{
  OBJECT-PROPERTIES
  {
    Date=13-05-13;
    Time=14:40:15;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            MigrateTableFieldTriggers('CORE');
          END;

  }
  CODE
  {

    PROCEDURE MigrateTableFieldTriggers@1000000000(ObjectModelCode@1000000000 : Code[10]);
    VAR
      Item@1000000001 : Record 50005;
      PropertyCollection@1000000002 : Record 50015;
    BEGIN
      Item.SETRANGE("Object Model Code", ObjectModelCode);
      Item.SETRANGE("Base Type", 'TableField');

      IF Item.FINDSET THEN
        REPEAT
          PropertyCollection.GET(ObjectModelCode, STRSUBSTNO('%1Properties', Item.Name));
          InsertTrigger(ObjectModelCode, PropertyCollection, 'OnLookup');
          InsertTrigger(ObjectModelCode, PropertyCollection, 'OnValidate');
        UNTIL Item.NEXT = 0;
    END;

    PROCEDURE InsertTrigger@1000000001(ObjectModelCode@1000000003 : Code[10];PropertyCollection@1000000001 : Record 50015;TriggerName@1000000002 : Text[1024]);
    VAR
      PropertyCollectionMember@1000000000 : Record 50016;
    BEGIN
      PropertyCollectionMember.VALIDATE("Object Model Code", ObjectModelCode);
      PropertyCollectionMember.VALIDATE("Property Collection Name", PropertyCollection.Name);
      PropertyCollectionMember.VALIDATE(Name, TriggerName);
      PropertyCollectionMember.VALIDATE("Property Type", 'TriggerProperty');
      PropertyCollectionMember.INSERT(TRUE);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50099 Migrate Triggers
{
  OBJECT-PROPERTIES
  {
    Date=13-05-13;
    Time=14:20:19;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=VAR
            Item@1000000000 : Record 50005;
          BEGIN
            MigrateTriggers('CORE');
          END;

  }
  CODE
  {

    PROCEDURE MigrateTriggers@1000000001(ObjectModelCode@1000000000 : Code[10]);
    VAR
      TriggerItem@1000000001 : Record 50005;
      Attribute@1000000002 : Record 50009;
      PropertyCollection@1000000003 : Record 50015;
      PropertyCollectionMember@1000000005 : Record 50016;
      PropertyCollectionName@1000000004 : Text[1024];
    BEGIN
      TriggerItem.SETRANGE("Object Model Code", ObjectModelCode);
      TriggerItem.SETFILTER(Name, '*Triggers');

      IF TriggerItem.FINDSET THEN BEGIN
        REPEAT
          PropertyCollectionName := GetPropertyCollectionName(TriggerItem.Name);
          PropertyCollection.GET(ObjectModelCode, PropertyCollectionName);

          Attribute.SETRANGE("Object Model Code", TriggerItem."Object Model Code");
          Attribute.SETRANGE("Container Type", Attribute."Container Type"::Item);
          Attribute.SETRANGE("Container Name", TriggerItem.Name);

          IF Attribute.FINDSET THEN
            REPEAT
              PropertyCollectionMember.VALIDATE("Object Model Code", ObjectModelCode);
              PropertyCollectionMember.VALIDATE("Property Collection Name", PropertyCollectionName);
              PropertyCollectionMember.VALIDATE(Name, Attribute.Name);
              PropertyCollectionMember.VALIDATE("Property Type", 'TriggerProperty');
              PropertyCollectionMember.INSERT(TRUE);
            UNTIL Attribute.NEXT = 0;
        UNTIL TriggerItem.NEXT = 0;
      END;
    END;

    PROCEDURE GetPropertyCollectionName@1000000006(TriggerItemName@1000000000 : Text[1024]) : Text[1024];
    BEGIN
      EXIT(STRSUBSTNO('%1Properties', DELSTR(TriggerItemName, STRLEN(TriggerItemName) - 7)));
    END;

    BEGIN
    END.
  }
}

